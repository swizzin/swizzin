#!/bin/bash
#
# [swizzin :: box management solution]
# `box -h` for commands and info
#
# Author             :   swizzin | liara
#
# Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################

#shellcheck source=sources/globals.sh
. /etc/swizzin/sources/globals.sh
echo_log_only ">>>> \`box $*\`"
echo_log_only "git @ $(git --git-dir=/etc/swizzin/.git rev-parse --short HEAD) 2>&1"
normal=$(tput sgr0)

function _intro() {
    whiptail --title "Swizzin Package Manager" --msgbox "Welcome to the Box! Using this script you can choose to install and remove the packages contained within the package repository. Use the arrow keys to navigate, spacebar to toggle the currently selected item and enter to continue." 15 50
}

function _function() {
    function=$(
        whiptail --title "Swizzin" --menu "Choose an option:" --ok-button "Continue" --nocancel 12 50 3 \
            Install "packages" \
            Remove "packages" \
            Exit "" 3>&1 1>&2 2>&3
    )

    if [[ $function == Install ]]; then
        _install
    elif [[ $function == Remove ]]; then
        _remove
    elif [[ $function == Exit ]]; then
        exit 0
    fi
}

function _install() {
    installa=()
    locks=($(find /usr/local/bin/swizzin/install -type f -printf "%f\n" | cut -d "." -f 1 | sort -d))
    for i in "${locks[@]}"; do
        app=${i}
        if [[ ! -f /install/.$app.lock ]]; then
            installa+=("$i" '""')
        fi
    done
    whiptail --title "Install Software" --checklist --noitem --separate-output "Make some choices:" 15 26 7 "${installa[@]}" 2> results

    readarray -t result < results
    for result in "${result[@]}"; do
        echo_info "Installing ${result}"
        bash "/usr/local/bin/swizzin/install/${result}.sh"
    done

    rm results
    _function
}

function _remove() {
    removea=()
    locks=($(find /usr/local/bin/swizzin/remove -type f -printf "%f\n" | cut -d "." -f 1 | sort -d))
    for i in "${locks[@]}"; do
        app=${i}
        if [[ -f /install/.$app.lock ]]; then
            removea+=("$i" '""')
        fi
    done
    whiptail --title "Remove Software" --noitem --checklist --separate-output "Make some choices:" 15 26 7 "${removea[@]}" 2> results
    readarray -t result < results
    for result in "${result[@]}"; do
        echo_info -e "Removing ${result}"
        bash /usr/local/bin/swizzin/remove/${result}.sh
    done
    rm results
    _function
}

function _cli() {
    arg=("$@")
    packages=("${arg[@]:1}")
    repo=($(find /usr/local/bin/swizzin/install -type f -printf "%f\n" | cut -d "." -f 1))
    for app in "${packages[@]}"; do
        if [[ -f /install/.${app}.lock ]]; then
            echo_warn "Package $app already installed"
        else
            if [[ "${repo[*]}" =~ $app ]]; then
                echo_info "Installing $app"
                echo_docs "applications/$app"
                bash /usr/local/bin/swizzin/install/$app.sh
            else
                echo_warn "Package $app not found"
            fi
        fi
    done
}

function _clr() {
    arg=("$@")
    packages=("${arg[@]:1}")
    for app in "${packages[@]}"; do
        if [[ -f /install/.$app.lock ]]; then
            schedule_remove="true"
            echo_info "Removing $app"
            bash /usr/local/bin/swizzin/remove/$app.sh
            echo_success "$app removed"
        else
            echo_warn "Package $app not installed"
        fi
    done
    if [[ $schedule_remove = "true" ]]; then
        apt_autoremove
    fi
}

function _update() {
    # Checking for develop branch
    if [ "$branch_name" == "develop" ]; then
        SWIZ_GIT_REF="develop"
        export SWIZ_GIT_REF
    fi

    if [[ -L /etc/swizzin ]]; then
        noupdate_message="Not updating /etc/swizzin as it is a symlink. Please consult your provider/maintainers in case you believe this is an error."
        noupdate="true"
    elif [[ -e /etc/swizzin/.dev.lock ]]; then
        noupdate_message="Not updating /etc/swizzin as a dev lockfile is present."
        noupdate="true"
    elif [[ $1 == "--dev" ]]; then
        noupdate_message="Not updating from git due to --dev flag"
        noupdate="true"
    fi

    #Checking for EOL releases
    case "$(_os_codename)" in
        "focal" | "buster" | "bullseye" | "jammy" | "bookworm")
            echo_log_only "OS supported"
            ;;
        *)
            name=$(_os_codename)
            echo_warn "${name^} is not supported by swizzin at this stage.
You will not be receiving any new updates past the last supported commit. Swizzin will continue to run as-is.
We URGE you to migrate to a supported release if/while you still have the chance."
            SWIZ_GIT_REF="tags/eol-$(_os_codename)"
            export SWIZ_GIT_REF
            ;;
    esac
    echo_log_only "noupdate = $noupdate"
    # If there is nothing blocking the update...
    if [[ -z $noupdate ]]; then
        # Run the git update procedure
        echo_progress_start "Updating swizzin local repository"
        git -C /etc/swizzin checkout "${SWIZ_GIT_REF:-master}" >> $log 2>&1 ||
            {
                echo_warn "Unclean repo detected, resetting current branch."
                git -C /etc/swizzin reset --hard >> $log 2>&1
                git -C /etc/swizzin checkout "${SWIZ_GIT_REF:-master}" >> $log 2>&1
            }
        {
            #shellcheck disable=SC2129
            git -C /etc/swizzin fetch --all --tags --prune >> $log 2>&1
            git -C /etc/swizzin reset --hard "${SWIZ_GIT_REF:-origin/master}" >> $log 2>&1
        } || {
            echo_error "Failed to update from git"
            exit 1
        }
        echo_progress_done "Local repository updated using: ${SWIZ_GIT_REF:-master}"
        echo_info "HEAD is now set to $(git -C /etc/swizzin log --pretty=format:'%h' -n1)"
    else
        echo_warn "$noupdate_message"
    fi
    export SWIZ_REPO_SCRIPT_RAN=true

    echo_log_only "Re-sourcing globals.sh"
    # source globals again in case changes were made
    #shellcheck source=sources/globals.sh
    . /etc/swizzin/sources/globals.sh

    for f in /etc/swizzin/scripts/update/*; do
        bash "$f" || exit 1
    done
}

function _upgrade() {
    arg=("$@")
    packages=("${arg[@]:1}")
    repo=($(find /usr/local/bin/swizzin/upgrade -type f -printf "%f\n" | cut -d "." -f 1))
    for app in "${packages[@]}"; do
        if [[ "${repo[*]}" =~ $app ]]; then
            bash /usr/local/bin/swizzin/upgrade/"$app".sh || exit 1
        else
            echo_warn "Upgrade script for $app does not exist"
        fi
    done
}

#shellcheck disable=SC2059
function _help() {
    sgformat="${bold}%-15s${normal}"
    spacing=$(echo $'\t' | pr -Te15)

    echo -e "Usage:\t$(basename $0)"
    echo -e "\t$(basename $0) [ install | remove | upgrade ] ${bold}pkg1${normal} [ pkg2 ... ]"
    echo -e "\t$(basename $0) [ adduser | deluser | chpasswd ] ${bold}username${normal} [ password ]"
    echo -e "\t$(basename $0) [ list | update ]"
    echo
    echo -e "Note: Only install and remove functions accept package arguments. List and update must be run without modifiers\n" | fmt --goal=66 --tagged-paragraph
    echo
    printf "${sgformat}" "install"
    echo -e "The install function requires at least one package name as an argument but will accept multiples" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo -e "               Example: box install quassel syncthing znc" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo
    printf "${sgformat}" "remove"
    echo -e "The remove function requires at least one package name as an argument but will accept multiples" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo -e "               Example: box remove quassel syncthing znc" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo
    printf "${sgformat}" "upgrade"
    echo -e "Runs the associated upgrade script." | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo -e "               Example: box upgrade plex curl" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo
    printf "${sgformat}" "adduser"
    echo -e "The adduser function requires a single user to be specified, this user will be created" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo -e "               Example: box adduser freeloadingfriend" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo
    printf "${sgformat}" "deluser"
    echo -e "The deluser function requires a single user to be specified, this user will be removed" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo -e "               Example: box deluser exgirlfriend" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo
    printf "${sgformat}" "chpasswd"
    echo -e "The chpasswd function requires a single user to be specified, their password will be changed" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo -e "               Example: box chpasswd forgetfulfriend" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo
    printf "${sgformat}" "update"
    echo -e "The update command will update your local swizzin repository to the latest version and run important update scripts" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
    echo
    printf "${sgformat}" "list"
    echo -e "The list command will list packages available to be managed by box" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"
}

function _list() {
    repo=($(find /usr/local/bin/swizzin/install -type f -printf "%f\n" | cut -d. -f 1 | sort -d))
    locale=/etc/swizzin/sources/lang_en
    for app in "${repo[@]}"; do
        sgformat="${bold}%-15s${normal}"
        spacing=$(echo $'\t' | pr -Te15)
        description=$(grep -i -m 1 \\\[\'$app $locale | cut -d= -f2 | sed "s/ '//g" | sed "s/';//g" | sed "s/\\\'/'/g")
        if [[ -z $description ]]; then description="Description missing"; fi
        printf "${sgformat}" "$app"
        echo -e "${description}\n" | fmt --goal=50 | sed -e "2,\$s/^/$spacing/"

    done
}

function _adduser() {
    user=$2
    [[ -n $3 ]] && pass=$3

    username_check

    if [[ -f /root/${user}.info ]]; then
        echo_error "User already exists within swizzin"
        exit 1
    fi

    if [[ -z $SETUP_USER ]]; then #If this is not coming from setup.sh...
        if [[ "$(cut -d: -f1 < /root/.master.info 2> /dev/null)" = "$user" ]]; then
            echo_error "User already exists within swizzin"
            exit 1
        fi
    fi

    if id -u "${user}" > /dev/null 2>&1; then
        echo_info "The user ${user} already appears to be present on this machine; however, it does not appear to be configured as a swizzin user.\nThe user will be added to swizzin."
        ask "Continue setting up user?" Y || exit 1
        existing=true
    fi

    password_check

    echo "$user:$pass" > /root/"${user}".info
    if [[ $existing != "true" ]]; then
        useradd "${user}" -m -G www-data -s /bin/bash >> $log 2>&1
    fi
    chpasswd <<< "${user}:${pass}" >> $log 2>&1
    if [[ -f /etc/htpasswd ]]; then
        echo_log_only "htpasswd file exists"
        htpasswd -b /etc/htpasswd "$user" "$pass" >> $log 2>&1
    else
        echo_log_only "creating htpasswd file"
        htpasswd -b -c /etc/htpasswd "$user" "$pass" >> $log 2>&1
    fi
    mkdir -p /etc/htpasswd.d/
    htpasswd -b -c /etc/htpasswd.d/htpasswd."${user}" "$user" "$pass" >> $log 2>&1

    if [[ -f /install/.quota.lock ]]; then
        bash /etc/swizzin/scripts/setdisk "$user"
    fi

    mkdir /home/"$user"/.config
    chown "$user": /home/"$user"/.config
    chmod 750 /home/"${user}"

    if [[ -f /install/.panel.lock ]]; then setfacl -m g:swizzin:rx /home/"${user}"; fi
    echo "D /var/run/${user} 0750 ${user} ${user} -" >> /etc/tmpfiles.d/"${user}".conf
    systemd-tmpfiles /etc/tmpfiles.d/"${user}".conf --create >> $log 2>&1

    for app in rtorrent rutorrent deluge autodl autobrr flood nzbget lounge transmission wireguard organizr mango qbittorrent; do
        if [[ -f /install/.${app}.lock ]]; then
            case $app in
                autodl)
                    /usr/local/bin/swizzin/install/${app}.sh "${user}"
                    ;;
                deluge)
                    /usr/local/bin/swizzin/install/${app}.sh "${user}"
                    app="{deluged,deluge-web}"
                    eval systemctl enable -q ${app}@"${user}"
                    eval systemctl start ${app}@"${user}"
                    ;;
                rutorrent)
                    if [[ ! -f /install/.rutorrent.lock ]]; then touch /install/.rutorrent.lock; fi
                    /usr/local/bin/swizzin/install/${app}.sh
                    ;;
                *)
                    /usr/local/bin/swizzin/install/${app}.sh "${user}"
                    systemctl enable -q ${app}@"${user}"
                    systemctl start ${app}@"${user}"
                    ;;
            esac
        fi

    done

    USER=${user^^}

    #shellcheck source=sources/functions/utils
    . /etc/swizzin/sources/functions/utils

    if [[ -n $SETUP_USER ]]; then
        usermod -a -G sudo "$user"
        rm /root/"$user".info
        echo "$user:$pass" > /root/.master.info
    elif [[ -z $SETUP_USER ]]; then # Only for non-master users, therefore only if this is not coming from setup.sh
        cat > /etc/sudoers.d/"${user}" << SUD
Cmnd_Alias   ${USER}CMDS = /bin/systemctl stop flood@${user}, /bin/systemctl restart flood@${user}, /bin/systemctl start flood@${user}, /bin/systemctl start rtorrent@${user}, /bin/systemctl stop rtorrent@${user}, /bin/systemctl restart rtorrent@${user}, /bin/systemctl start deluged@${user}, /bin/systemctl stop deluged@${user}, /bin/systemctl restart deluged@${user}, /bin/systemctl start deluge-web@${user}, /bin/systemctl stop deluge-web@${user}, /bin/systemctl restart deluge-web@${user}, /bin/systemctl start irssi@${user}, /bin/systemctl stop irssi@${user}, /bin/systemctl restart irssi@${user}, /bin/systemctl start qbittorrent@${user}, /bin/systemctl stop qbittorrent@${user}, /bin/systemctl restart qbittorrent@${user}, /usr/local/bin/swizzin/box chpasswd ${user}

${user}     ALL = (ALL) NOPASSWD: ${USER}CMDS
SUD
    fi

    if [[ -f /install/.nginx.lock ]]; then
        systemctl reload nginx
    fi

    echo_success "User $user created"
}

function _deluser() {
    user=$2
    if [[ ! -f /root/${user}.info ]]; then
        master=$(cut -d: -f1 < /root/.master.info)
        if [[ $user == "$master" ]]; then
            echo_warn "Master user deletion is not supported"
            exit 1
        fi
        echo_error "Error: user ${user} not found. Exiting."
        exit 1
    fi

    echo_warn "This will delete the user '${user}' and all associated configs and subdirectories.\nTHIS ACTION CANNOT BE UNDONE.\nRemoval will start as soon as you confirm this message."
    ask "Are you sure you want to continue?" N || exit 1

    for app in rtorrent rutorrent deluge autodl flood nzbget lounge transmission mango wireguard organizr qbittorrent autobrr; do
        if [[ -f /install/.${app}.lock ]]; then
            case $app in
                autodl)
                    systemctl disable --now irssi@${user}
                    ;;
                deluge)
                    app="{deluged,deluge-web}"
                    rm -rf /etc/nginx/conf.d/${user}.deluge.conf
                    eval systemctl disable ${app}@${user}
                    eval systemctl stop ${app}@${user}
                    ;;
                lounge)
                    su -s /bin/sh lounge -c "thelounge remove ${user}" > /dev/null
                    ;;
                mango)
                    if [[ -z $mangodir ]]; then mangodir="/opt/mango"; fi
                    su mango -c "$mangodir/mango admin user delete ${user}"
                    ;;
                organizr)
                    #TODO automate removal steps
                    echo_info "Remember to manually remove the organizr account!"
                    ;;
                rutorrent)
                    if [[ ! -f /install/.rutorrent.lock ]]; then touch /install/.rutorrent.lock; fi
                    rm -rf /srv/rutorrent/conf/users/${user}
                    rm -rf /srv/rutorrent/share/users/${user}
                    rm -f /etc/nginx/apps/${user}*
                    ;;
                wireguard)
                    rm -rf /home/${user}/.wireguard
                    systemctl disable --now wg-quick@wg"$(id -u "$user")"
                    ;;
                *)
                    systemctl disable ${app}@${user}
                    systemctl stop ${app}@${user}
                    ;;
            esac
        fi
    done

    if [[ -z $(which lsof) ]]; then
        apt_install lsof
    fi

    lsof -t /home/${user} | xargs -I % kill -9 %
    deluser --force --remove-home ${user} >> $log 2>&1
    groupdel ${user} >> $log 2>&1
    rm -f /etc/htpasswd.d/htpasswd.${user}
    htpasswd -D /etc/htpasswd ${user} >> $log 2>&1
    rm -f /etc/tmpfiles.d/${user}.conf
    rm -f /etc/nginx/conf.d/${user}*
    rm -f /etc/sudoers.d/${user}
    rm -rf /run/screen/S-${user}
    rm -rf /var/run/${user}
    rm -rf /home/"${user:?}"
    rm /root/${user}.info
    systemctl reload nginx
    echo_success "User $user removed"
}

function _chpasswd() {
    user="$2"
    if ! id "$user"; then
        echo_error "User $user does not exist."
        exit 1
    fi

    [[ -n $3 ]] && pass="$3"
    . /etc/swizzin/sources/functions/utils
    password_check

    master=$(cut -d: -f1 < /root/.master.info)
    if [[ $user = "$master" ]]; then
        echo "$user:$pass" > /root/.master.info
    fi
    echo "$user:$pass" > /root/${user}.info
    chpasswd <<< "${user}:${pass}" >> $log 2>&1
    htpasswd -b /etc/htpasswd $user "$pass" >> $log 2>&1
    mkdir -p /etc/htpasswd.d/
    htpasswd -b -c /etc/htpasswd.d/htpasswd.${user} $user "$pass" >> $log 2>&1
    for app in autobrr deluge lounge mango organizr qbittorrent transmission; do
        if [[ -f /install/.${app}.lock ]]; then
            case $app in
                autobrr)
                    echo -n "$pass" | /usr/bin/autobrrctl --config "/home/$user/.config/autobrr" change-password "$user"
                    ;;
                deluge)
                    systemctl stop deluged@${user} >> $log 2>&1
                    systemctl stop deluge-web@${user} >> $log 2>&1
                    DWSALT=$(tr -dc 'a-zA-Z0-9' < /dev/urandom | fold -w 32 | head -n 1)
                    if $(command -v python2.7 > /dev/null 2>&1); then
                        pythonversion=python2.7
                    elif $(command -v python3 > /dev/null 2>&1); then
                        pythonversion=python3
                    fi
                    DWP=$(${pythonversion} /usr/local/bin/swizzin/deluge.Userpass.py ${pass} ${DWSALT})
                    sed -i "s/.*${user}.*/${user}:${pass}:10/" /home/$user/.config/deluge/auth
                    sed -i "s/.*pwd_salt.*/  \"pwd_salt\": \"${DWSALT}\",/" /home/$user/.config/deluge/web.conf
                    sed -i "s/.*pwd_sha1.*/  \"pwd_sha1\": \"${DWP}\",/" /home/$user/.config/deluge/web.conf
                    sed -i "/$user/{n;s/.*/      \"${pass}\"/}" /home/${user}/.config/deluge/hostlist.conf.1.2
                    systemctl start deluged@${user} >> $log 2>&1
                    systemctl start deluge-web@${user} >> $log 2>&1
                    ;;
                lounge)
                    su -s /bin/sh lounge -c "thelounge reset $user " <<< "${pass}" >> $log 2>&1
                    ;;
                mango)
                    if [[ -z $mangodir ]]; then mangodir="/opt/mango"; fi
                    su mango -c "$mangodir/mango admin user update ${user} -p ${pass}" >> $log 2>&1
                    ;;
                organizr)
                    #TODO fix when API allows to
                    echo_warn "Remember to manually change the organizr account's password!"
                    ;;
                qbittorrent)
                    . /etc/swizzin/sources/functions/qbittorrent
                    qbittorrent_chpasswd "${user}" "${pass}"
                    ;;
                transmission)
                    systemctl stop transmission@${user} >> $log 2>&1
                    sed -i "s/.*rpc-password.*/  \"rpc-password\": \"${pass}\",/" /home/$user/.config/transmission-daemon/settings.json
                    systemctl start transmission@${user} >> $log 2>&1
                    ;;
                *) ;;
            esac
        fi
    done
    echo_success "Password for $user changed"
    pass=""
    unset pass
}

function _nukeovh() {
    bash /etc/swizzin/scripts/nukeovh
}

function _gobrr() {
    app=$2
    if [[ $app != brr ]]; then
        echo_error "You can only go brr"
        exit 1
    fi

    apt_install --no-recommends mpv
    mpv --vo=tct --really-quiet https://media.tenor.co/videos/36c2c191bf4e05338e48c83a9a81ce35/mp4 --loop-file=2 &
    if [[ ! -f /install/.autobrr.lock ]]; then
        bash /etc/swizzin/scripts/install/autobrr.sh >> ${log} 2>&1
    fi
    wait
    echo_success "BOX WENT BRR"
}

_run_tests() {
    shift
    if [[ -n $1 ]]; then
        list=("$@")
    else
        #shellcheck source=sources/functions/utils
        . /etc/swizzin/sources/functions/utils
        readarray -t list < <(_get_installed_apps)
        echo_info "Tests to run: ${list[*]}"
    fi

    export bell=false
    oldlog="$log"
    log="/root/logs/tests-$(date +%Y.%m.%d-%H:%M:%S).txt"
    # log='./test-results.txt'
    export log
    touch "$log"
    for item in "${list[@]}"; do
        if [ -f /etc/swizzin/scripts/tests/"$item".sh ]; then
            echo_log_only "Running test for $item"
            bash /etc/swizzin/scripts/tests/"$item".sh || BAD="true"

        else
            echo_log_only "Running default test for $item.\nThis test is likely to fail in case the item is not a standard service+nginx app"
            bash /etc/swizzin/scripts/tests/_basetest.sh "$item" || BAD="true"

        fi
    done

    if [ "$BAD" == "true" ]; then
        exit 1
    else
        echo_success "All tests completed succesfully.\nTest log can be found in $log"
    fi
    log="$oldlog"
    export log

}

branch_name="$(git -C /etc/swizzin symbolic-ref HEAD 2> /dev/null)" || branch_name="(unnamed branch)" # detached HEAD
branch_name=${branch_name##refs/heads/}

if [[ $branch_name != 'master' ]]; then
    echo_info "Currently on branch: $branch_name"
fi

if [ -f /etc/swizzin/.test.lock ]; then
    testmsg="Tests will be ran at the end of this due to .test.lock"
    runtests="true"
elif [[ "$*" == *--test* ]]; then
    testmsg="Tests will be ran due to --test flag"
    runtests="true"
    #Removing `--test` from the arguments
    for arg in "$@"; do [[ $arg == --test ]] || args+=("$arg"); done
    set -- "${args[@]}"
    echo_log_only "Args after cleanup: $(printf "%s\n" "$@")"
fi

case "$1" in
    "")
        _intro
        _function
        exit 0
        ;;
    "help" | "-h")
        _help "$0"
        exit 0
        ;;
    "install" | "it")
        if [[ -z $2 ]]; then
            echo_error "You must choose some packages"
            exit 1
        fi
        _cli "$@"
        ;;
    "remove" | "rm")
        if [[ -z $2 ]]; then
            echo_error "You must choose some packages"
            exit 1
        fi
        _clr "$@"
        ;;
    "adduser")
        if [[ -n $4 ]]; then
            echo_error "Too many arguments\nCorrect usage: box adduser <username> [<password>]"
            exit 1
        fi
        _adduser "$@"
        ;;
    "deluser")
        if [[ -z $2 ]]; then
            echo_error "You must specify a username.\nCorrect usage: box deluser <username>"
            exit 1
        fi
        if [[ -n $3 ]]; then
            echo_error "Too many arguments\nCorrect usage: box deluser <username>"
            exit 1
        fi
        _deluser "$@"
        ;;
    "chpasswd")
        if [[ -z $2 ]]; then
            echo_error "You must specify a username.\nCorrect usage: box chpasswd <username> [<password>]"
            exit 1
        fi
        if [[ -n $4 ]]; then
            echo_error "Too many arguments\nCorrect usage: box chpasswd <username> [<password>]"
            exit 1
        fi
        _chpasswd "$@"
        ;;
    "rmgrsec")
        _nukeovh
        exit 0
        ;;
    "rtx")
        /usr/local/bin/swizzin/rtx
        exit 0
        ;;
    "update")
        _update "$2"
        ;;
    "upgrade")
        if [[ $2 = "--dev" ]]; then
            dev="--dev"
            shift
        fi
        if [[ ! $2 ]]; then
            echo_error "You must choose at least one package to update."
            exit 1
        fi
        _update $dev
        _upgrade "$@"
        ;;
    "list")
        _list
        exit 0
        ;;
    "test")
        _run_tests "$@"
        exit 0 # No need to double-run tests
        ;;
    "go")
        _gobrr "$@"
        ;;
    *)
        echo_error "Invalid command: $1"
        exit 1
        ;;
esac

if [[ $runtests == "true" ]]; then
    echo
    echo_warn "$testmsg"
    _run_tests
fi
