#!/bin/bash

function rutorrent_install() {
    apt_install sox geoip-database p7zip-full zip unzip

    mkdir -p /srv
    if [[ ! -d /srv/rutorrent ]]; then
        echo_progress_start "Cloning ruTorrent"
        # Get current stable ruTorrent version
        release=$(git ls-remote --tags --refs https://github.com/novik/ruTorrent.git | awk '{sub("refs/tags/", ""); print $2 }' | grep -v beta | sort -Vr | head -n1)
        git clone --recurse-submodules --depth 1 -b ${release} https://github.com/Novik/ruTorrent.git /srv/rutorrent >> "$log" 2>&1 || {
            echo_error "Failed to clone ruTorrent"
            exit 1
        }
        chown -R www-data:www-data /srv/rutorrent
        rm -rf /srv/rutorrent/plugins/throttle
        rm -rf /srv/rutorrent/plugins/_cloudflare
        rm -rf /srv/rutorrent/plugins/extratio
        rm -rf /srv/rutorrent/plugins/rpc
        rm -rf /srv/rutorrent/conf/config.php
        echo_progress_done "ruTorrent cloned"
    fi

    echo_progress_start "Cloning some popular themes and plugins"
    sed -i 's/useExternal = false;/useExternal = "mktorrent";/' /srv/rutorrent/plugins/create/conf.php
    sed -i 's/pathToCreatetorrent = '\'\''/pathToCreatetorrent = '\''\/usr\/bin\/mktorrent'\''/' /srv/rutorrent/plugins/create/conf.php
    sed -i "s/\$pathToExternals\['sox'\] = ''/\$pathToExternals\['sox'\] = '\/usr\/bin\/sox'/g" /srv/rutorrent/plugins/spectrogram/conf.php

    #shellcheck source=sources/functions/utils
    . /etc/swizzin/sources/functions/utils
    install_rar

    #if [[ ! -d /srv/rutorrent/plugins/theme/themes/club-QuickBox ]]; then
    #    git clone https://github.com/QuickBox/club-QuickBox /srv/rutorrent/plugins/theme/themes/club-QuickBox >> "$log" 2>&1 || { echo_error "git of autodl plugin to main plugins seems to have failed"; }
    #    perl -pi -e "s/\$defaultTheme \= \"\"\;/\$defaultTheme \= \"club-QuickBox\"\;/g" /srv/rutorrent/plugins/theme/conf.php
    #fi

    if [[ ! -d /srv/rutorrent/plugins/filemanager ]]; then
        git clone https://github.com/nelu/rutorrent-filemanager /srv/rutorrent/plugins/filemanager >> ${log} 2>&1 || { echo_error "git of autodl plugin to main plugins seems to have failed"; }
        rutorrent_fm_config
        #pinning filemanager should no longer be required
        #git -C /srv/rutorrent/plugins/filemanager checkout 234f5f20841ad3d1e3c095e6c6954a875fc8a6ea >> ${log} 2>&1
    fi

    if [[ ! -d /srv/rutorrent/plugins/ratiocolor ]]; then
        cd /srv/rutorrent/plugins
        svn co https://github.com/Gyran/rutorrent-ratiocolor.git/trunk ratiocolor >> "$log" 2>&1
        sed -i "s/changeWhat = \"cell-background\";/changeWhat = \"font\";/g" /srv/rutorrent/plugins/ratiocolor/init.js || { echo_error "git of autodl plugin to main plugins seems to have failed"; }
    fi

    echo_progress_done "Plugins downloaded"

    if [[ -f /install/.quota.lock ]] && [[ -z $(grep quota /srv/rutorrent/plugins/diskspace/action.php) ]]; then
        rutorrent_fix_quota
    fi

    cat > /srv/rutorrent/conf/config.php << 'RUC'
<?php
	// configuration parameters

	// for snoopy client
	$httpUserAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36';
	$httpTimeOut = 30; // in seconds
	$httpUseGzip = true;
	$httpIP = null;				// IP string. Or null for any.
	$httpProxy = array
	(
		'use' 	=> false,
		'proto'	=> 'http',		// 'http' or 'https'
		'host'	=> 'PROXY_HOST_HERE',
		'port'	=> 3128
	);

	// for xmlrpc actions
	$rpcTimeOut = 5; // in seconds
	$rpcLogCalls = false;
	$rpcLogFaults = true;

	// for php
	$phpUseGzip = false;
	$phpGzipLevel = 2;

	$schedule_rand = 10;			// rand for schedulers start, +0..X seconds

	$do_diagnostic = true;			// Diagnose ruTorrent. Recommended to keep enabled, unless otherwise required.
	$al_diagnostic = true;			// Diagnose auto-loader. Set to "false" to make composer plugins work.
	
	$log_file = '/tmp/errors.log';		// path to log file (comment or leave blank to disable logging)

	$saveUploadedTorrents = true;		// Save uploaded torrents to profile/torrents directory or not
	$overwriteUploadedTorrents = false;     // Overwrite existing uploaded torrents in profile/torrents directory or make unique name

	//$topDirectory = '/';			// Upper available directory. Absolute path with trail slash.
	$forbidUserSettings = false;

	//$scgi_port = 5000;
	//$scgi_host = "127.0.0.1";

	// For web->rtorrent link through unix domain socket 
	// (scgi_local in rtorrent conf file), change variables 
	// above to something like this:
	//
	// $scgi_port = 0;
	// $scgi_host = "unix:///tmp/rpc.socket";

	//$XMLRPCMountPoint = "/RPC2";		// DO NOT DELETE THIS LINE!!! DO NOT COMMENT THIS LINE!!!
	
	$throttleMaxSpeed = 327625*1024;	// DO NOT EDIT THIS LINE!!! DO NOT COMMENT THIS LINE!!!
	// Can't be greater then 327625*1024 due to limitation in libtorrent ResourceManager::set_max_upload_unchoked function.

	$pathToExternals = array(
		"php" 	=> '',			// Something like /usr/bin/php. If empty, will be found in PATH.
		"curl"	=> '',			// Something like /usr/bin/curl. If empty, will be found in PATH.
		"gzip"	=> '',			// Something like /usr/bin/gzip. If empty, will be found in PATH.
		"id"	=> '',			// Something like /usr/bin/id. If empty, will be found in PATH.
		"stat"	=> '',			// Something like /usr/bin/stat. If empty, will be found in PATH.
	);
	
	$localHostedMode = true; 		// Set to true if rTorrent is hosted on the SAME machine as ruTorrent
	
	$cachedPluginLoading = false;	// Set to true to enable rapid cached loading of ruTorrent plugins	
                                    // Required to clear web browser cache when upgrading versions

	$localhosts = array( 			// list of local interfaces
		"127.0.0.1",
		"localhost",
	);

	$profilePath = '../../share';		// Path to user profiles
	$profileMask = 0777;			// Mask for files and directory creation in user profiles.
						// Both Webserver and rtorrent users must have read-write access to it.
						// For example, if Webserver and rtorrent users are in the same group then the value may be 0770.

	$tempDirectory = null;			// Temp directory. Absolute path with trail slash. If null, then autodetect will be used.

	$canUseXSendFile = false;		// If true then use X-Sendfile feature if it exist

	$locale = "UTF8";

	$enableCSRFCheck = false;		// If true then Origin and Referer will be checked
	$enabledOrigins = array();		// List of enabled domains for CSRF check (only hostnames, without protocols, port etc.).
					            	// If empty, then will retrieve domain from HTTP_HOST / HTTP_X_FORWARDED_HOST
RUC
}

function rutorrent_fm_config() {
    # Reconfigure file manager plugin for ARM64 support
    # rar is not supported on arm, so it needs to be dropped
    if [[ "$(_os_arch)" = "arm64" ]]; then
        cat > /srv/rutorrent/plugins/filemanager/conf.php << 'RUFMC'
<?php

    global $pathToExternals;
    // set with fullpath to binary or leave empty
    $pathToExternals['7zip'] = '/usr/bin/7z';

    $config['mkdperm'] = 755; // default permission to set to new created directories
    $config['show_fullpaths'] = false; // wheter to show userpaths or full system paths in the UI

    $config['textExtensions'] = 'log|txt|nfo|sfv|xml|html';

    // see what 7zip extraction supports as type by file extension
    $config['fileExtractExtensions'] = '(7z|bzip2|t?bz2|tgz|gz(ip)?|iso|img|lzma|rar|tar|t?xz|zip|z01|wim)(\.[0-9]+)?';

    // archive creation, see archiver man page before editing
    // archive.fileExt -> config
    $config['archive']['type'] = [
        '7z' => [
            'bin' => '7zip',
            'compression' => [1, 5, 9],
        ]];

   $config['archive']['type']['zip'] = $config['archive']['type']['7z'];
   $config['archive']['type']['tar'] = $config['archive']['type']['7z'];
   $config['archive']['type']['tar']['has_password'] = false;
   $config['archive']['type']['bz2'] = $config['archive']['type']['tar'];
   $config['archive']['type']['gz'] = $config['archive']['type']['tar'];
   $config['archive']['type']['tar.7z'] = $config['archive']['type']['tar'];
   $config['archive']['type']['tar.bz2'] = $config['archive']['type']['tar'];
   $config['archive']['type']['tar.gz'] = $config['archive']['type']['tar'];
   $config['archive']['type']['tar.xz'] = $config['archive']['type']['tar'];


   // multiple passes for archiving and compression
   $config['archive']['type']['tar.gz']['multipass'] = ['tar', 'gzip'];
   $config['archive']['type']['tar.bz2']['multipass'] = ['tar', 'bzip2'];
   $config['archive']['type']['tar.7z']['multipass'] = ['tar', '7z'];
   $config['archive']['type']['tar.xz']['multipass'] = ['tar', 'xz'];        
RUFMC
    fi
}

function rutorrent_nginx_config() {
    if [[ ! -f /etc/nginx/apps/rutorrent.conf ]]; then
        phpversion=$(php_service_version)
        sock="php${phpversion}-fpm"
        cat > /etc/nginx/apps/rutorrent.conf << RUM
location /rutorrent {
  auth_basic "What's the password?";
  auth_basic_user_file /etc/htpasswd;

  location ~ \.php$ {
    fastcgi_split_path_info ^(.+\.php)(/.+)\$;
    fastcgi_pass unix:/run/php/$sock.sock;
    fastcgi_param SCRIPT_FILENAME \$request_filename;
    include fastcgi_params;
    fastcgi_index index.php;
  }
}
RUM
    fi

    if [[ ! -f /etc/nginx/apps/rindex.conf ]]; then
        cat > /etc/nginx/apps/rindex.conf << RIN
location /rtorrent.downloads {
  alias /home/\$remote_user/torrents/rtorrent;
  include /etc/nginx/snippets/fancyindex.conf;
  auth_basic "What's the password?";
  auth_basic_user_file /etc/htpasswd;
  
  location ~* \.php($|/) {

  } 
}
RIN
    fi
}

function rutorrent_user_config() {
    users=($(_get_user_list))
    for user in "${users[@]}"; do
        if [[ ! -f /srv/rutorrent/conf/users/${user}/config.php ]]; then
            mkdir -p /srv/rutorrent/conf/users/${user}/
            cat > /srv/rutorrent/conf/users/${user}/config.php << RUU
<?php
\$topDirectory = '/home/${user}';
\$scgi_port = 0;
\$scgi_host = "unix:///var/run/${user}/.rtorrent.sock";
\$XMLRPCMountPoint = "/${user}";
\$quotaUser = "${user}";
?>
RUU
        fi

        if [[ ! -f /etc/nginx/apps/${user}.scgi.conf ]]; then
            cat > /etc/nginx/apps/${user}.scgi.conf << RUC
location /${user} {
include scgi_params;
scgi_pass unix:/var/run/${user}/.rtorrent.sock;
auth_basic "What's the password?";
auth_basic_user_file /etc/htpasswd.d/htpasswd.${user};
}
RUC
        fi
    done
}

function rutorrent_fix_quota() {
    cat > /srv/rutorrent/plugins/diskspace/action.php << 'DSKSP'
<?php
#################################################################################
##  [Quick Box - action.php modified for quota systems use]
#################################################################################
# QUICKLAB REPOS
# QuickLab _ packages:   https://github.com/QuickBox/QB/tree/master/rtplugins/diskspace
# LOCAL REPOS
# Local _ packages   :   ~/QuickBox/rtplugins
# Author             :   QuickBox.IO
# URL                :   https://plaza.quickbox.io
#
#################################################################################
  require_once( '../../php/util.php' );
  if (isset($quotaUser) && file_exists('/install/.quota.lock')) {
    $total = shell_exec("sudo /usr/bin/quota -wu ".$quotaUser."| tail -n 1 | sed -e 's|^[ \t]*||' | awk '{print $3*1024}'");
    $used = shell_exec("sudo /usr/bin/quota -wu ".$quotaUser."| tail -n 1 | sed -e 's|^[ \t]*||' | awk '{print $2*1024}'");
    $free = sprintf($total - $used);
    CachedEcho::send('{ "total": '.$total.', "free": '.$free.' }',"application/json");
  } else {
      CachedEcho::send('{ "total": '.disk_total_space($topDirectory).', "free": '.disk_free_space($topDirectory).' }',"application/json");
  }
?>
DSKSP
}
