#! /bin/bash

# A little tool to help make more stylish bash output with colours and indentation

export bell="true"                 # Whether or not Warning and Error should trigger the bell
export fold="true"                 # Whether or not to apply line wrapping to terminal for indentation
export full_width="true"           # Whether output should be as wide as the terminal. Setting to false will still wrap when terminal is less than default width
export width_cap="140"             # Applies when full-width is false. If terminal has less cols then this, the max terminal width is used.
export strip_ansi_from_log="false" # Whether the log should keep ansi escape characters (colors, etc) or not to ensure human readability

# colours
export red=$(tput setaf 1 || tput AF 1)
export green=$(tput setaf 2 || tput AF 2)
export yellow=$(tput setaf 3 || tput AF 3)
export blue=$(tput setaf 4 || tput AF 4)
export magenta=$(tput setaf 5 || tput AF 5)
export cyan=$(tput setaf 6 || tput AF 6)

# reset
export nc="$(tput sgr0)"

# modifiers
export bold=$(tput bold || tput md) # Start boldrbold="\e[21m"
export dim=$(tput dim)              # Start dim
export rdim="\e[22m"
export under=$(tput smul || tput us)   # Start under
export runder=$(tput rmul || tput ue)  # End   under
export italic=$(tput sitm || tput ZH)  # Start italic
export eitalic=$(tput ritm || tput ZR) # End   italic
export stout=$(tput smso || tput so)   # Start stand-out
export estout=$(tput rmso || tput se)  # End stand-out
# resetAllModes="\e[21m\e[22m\e[24m\e[25m\e[27m\e[28m"

ring_the_bell() {
    [[ $bell == "true" ]] && tput bel
}
export -f ring_the_bell

############ FUNCTIONS
# Unless otherwise specified, the following parameters apply:
# $1    the message to print
# $log  (optionally declared outside) the file to log to

# Prints an echo styled as warning
# Printing this message will ring the terminal bell.
# \
# \
# Parameters:
# - `$1` = message
echo_warn() {
    ring_the_bell
    colorprint "${yellow}${bold}WARN" "$1"
}
export -f echo_warn

# Prints an echo styled as error.
# Printing this message will ring the terminal bell.
# \
# \
# Parameters:
# - `$1` = message
echo_error() {
    ring_the_bell
    colorprint "${red}${bold}ERROR" "$1"
    colorprint "${red}${italic}" "Please consult the above and/or check the log (less -R +G $log)"
}
export -f echo_error

# Prints an echo styled as an information block
# \
# \
# Parameters:
# - `$1` = message
echo_info() {
    colorprint "${bold}INFO" "$1"
}
export -f echo_info

# Prints an echo which points to a link in the documentation
# \
# \
# Parameters:
# - `$1` = a URL suffix such as `applications/panel`
echo_docs() {
    colorprint "${cyan}${bold}DOCS" "${nc}${cyan}${italic}Further reference: ${under}https://swizzin.ltd/$1"
}
export -f echo_docs

# Prints the beginning of the progress "block"
# The next echo **has** to be a `echo_progress_done`
# \
# \
# Parameters:
# - `$1` = message
echo_progress_start() {
    colorprint "${dim}..." "$1"
}
export -f echo_progress_start

# Prints the end of the progress "block"
# \
# \
# Parameters:
# - `$1` = message (Optional, prints `Done!` by default)
echo_progress_done() {
    if [[ -z $1 ]]; then
        message="Done"
    else
        message="$1"
    fi
    colorprint "" "${green}${dim}\u2714   ${italic}$message"
}
export -f echo_progress_done

# Prints an echo styled as a success.
# Should be installed at the end of an action.
# \
# \
# Parameters:
# - `$1` = message
echo_success() {
    colorprint "${green}${bold}SUCCESS" "$1"
}
export -f echo_success

# Prints an echo styled as a query.
# \
# A `read` or some other stdin reading mechanism **has** to follow, as the second line does not contain a line break.
# \
# \
# Parameters:
# - `$1` = Query string
# - `$2` = Default or hint printed in parentheses on the second line before the caret.
echo_query() {
    colorprint "${blue}${bold}INPUT" "${italic}$1"
    if [[ -n $2 ]]; then
        options="($2) "
    else
        options=""
    fi
    echo -en "${blue}${bold}${options}>${nc} "
}
export -f echo_query

# Prints a message to the log, and to the log **only**
# \
# \
# Parameters:
# - `$1` = message
echo_log_only() {
    colorprint "${cyan}LOG" "$1"
}
export -f echo_log_only

# Formats a string with colour flags
# \
# Parameters:
# - `$1` = "Heading" (Include colours and other non-printing chars here)
# - `$2` = "Body" (Message, can contain non-printing chars but they will be counted into the fold)
# $log = location of the file to log into
function colorprint() {
    heading="$1\t"
    body="$2"
    # If the optional logfile was specified...
    if [[ -n $log ]]; then
        printf '%b' "${dim}[$(LANG=en_US date +"%a %b %d %T")]${nc} " | strip_ansi >> "$log"
        # ...and if function called was `echo_log_only`, do not print to stdout ad forward straight to file
        # echo "${FUNCNAME[ 1 ]}"
        if [[ ${FUNCNAME[1]} == "echo_log_only" ]]; then
            printf '%b\n' "${heading}${body}${nc}" | strip_ansi >> "$log"
        else # otherwise append it
            #Wrapped for the user
            printf '%b' "${heading}"
            printf '%b\n' "${body}${nc}" | do_the_wrap
            #Unwrapped for the log
            printf '%b\n' "${heading}${body}${nc}" | strip_ansi >> "$log"
        fi
    else # If log was not specified...
        printf '%b' "${heading}"
        printf '%b\n' "${body}${nc}" | do_the_wrap
    fi
}
export -f colorprint

# Wraps indents the text according to variables / terminal output
function do_the_wrap() {
    if [[ $fold = true ]]; then
        # width to use for folding and wrapping (excludes tab for indentation, subtract 8 char to account for that)
        width=$(tput cols)
        if [[ $full_width == "false" ]]; then
            if [[ $width -gt $width_cap ]]; then
                width=$width_cap
            fi
        fi
        width=$((width - 8))
        fold -s -w${width} | sed -e '2,$s/^/\t/'
    else
        cat
    fi
}
export -f do_the_wrap

# Removes color exit codes from stdin
function strip_ansi() {
    if [[ $strip_ansi_from_log == "true" ]]; then
        sed 's/\x1B\[[0-9;]\+[A-Za-z]//g'
    else
        cat
    fi
}
export -f strip_ansi

function echo_tests() {
    echo_test_basic
    echo
    echo_test_wrap
    echo
    echo_test_log
}

function echo_test_basic() {
    echo "Here are some basic echos"
    echo
    echo_success "Installation complete"
    echo_warn "Some hiccups"
    echo_error "wOoopsie fwings awe fucky wucky"
    echo_info "Something of note to user"
    echo_docs applications/transmission
    echo_progress_start "Something started"
    echo_progress_done "Done message"
    echo_query "Can you tell me this please" "YES/no"
    echo
}

function echo_test_wrap() {
    echo -E "Look at this nice wrapping biz going on"
    # Really long text just for illustration.
    # the "<Line Break> is there just to show where the actual escape char is"
    echo "Base string = "
    lipsum="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sodales orci vitae facilisis venenatis. Integer lobortis feugiat viverra. Morbi sit amet quam aliquet, ullamcorper turpis quis, porttitor erat. Nulla quis eleifend nisi.<Line break>\nFusce feugiat rutrum libero ut dictum. Nullam lacus eros, consequat et sem in, suscipit efficitur diam. Proin euismod nisi eu est congue, ut tempor diam gravida. Curabitur sit amet aliquam orci, quis fermentum augue."
    echo -E "$lipsum"
    echo
    echo_success "${lipsum}"
    echo_warn "${lipsum}"
    echo_error "${lipsum}"
    echo_info "${lipsum}"
    echo_progress_start "${lipsum}"
    echo_progress_done "Duis bibendum justo lorem"
    echo_query "${lipsum}"
}

function echo_test_log() {
    echo "And this is what happens when you set the \$log variable. (check source)"
    echo "What the screen sees:"
    log="/tmp/dumblog.txt"
    if [[ -f $log ]]; then rm $log; fi
    echo_info "${lipsum}"
    echo_log_only "${lipsum}"
    echo
    echo "The contents of the log:"
    cat $log
    rm $log
    log=""
}
