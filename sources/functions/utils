#!/bin/bash

# Handles rar installation for all distros and architectures
function install_rar() {
    # Checking for unrar because that's what we really need. rar itself is quite problematic to install, but is installed whenever possible.
    if ! which unrar > /dev/null; then
        case "$(_os_arch)" in
            "amd64")
                apt_install rar unrar
                ;;
            "arm64")
                apt_install unrar
                ;;
            *) # Default case if needs to be compiled from source
                srcurl="http://www.rarlab.com/rar/unrarsrc-6.0.3.tar.gz"
                ;;
        esac

        if [ -n "$srcurl" ]; then
            echo_progress_start "Compiling unrar from source"
            wget -q "$srcurl" -O /tmp/unrarsrc.tar.gz || {
                echo_error "Failed to download"
                exit 1
            }
            tar -xzf /tmp/unrarsrc.tar.gz -C /tmp >> "$log" 2>&1
            if ! make -C /tmp/unrar -f makefile >> $log 2>&1; then
                echo_warn "Failed to compile unrar. Please investigate\nInstallation will continue"
            else
                install -v -m755 /tmp/unrar/unrar /usr/bin >> $log
                rm -rf /tmp/unrar*
                echo_progress_done "Unrar compiled and installed"
            fi
        fi

        #Should not be required anymore, left for posterity
        if [ -n "$dlurl" ]; then
            # cd /tmp
            echo_progress_start "Downloading rar & unrar binaries for $(_os_distro)-$(_os_arch)"
            wget -q "$dlurl" -O /tmp/rarbins.tar.gz || {
                echo_warn "Failed to download binaries. Please investigate\nInstallation will continue"
            }
            tar -xzf /tmp/rarbins.tar.gz -C /tmp >> "$log" 2>&1
            cp /tmp/rar/*rar /bin >> "$log" 2>&1
            rm -rf /tmp/rarbins.tar.gz
            rm -rf /tmp/rar
            echo_progress_done "rar & unrar installed"
        fi

        #Currently un-used as well
        if [ -n "$deburl" ]; then
            echo_progress_start "Installing unrar"
            wget -q "$deburl" -O /tmp/unrar.deb || {
                echo_warn "Failed to download unrar. Please investigate\nInstallation will continue"
            }
            if ! dpkg -i /tmp/unrar.deb >> "$log" 2>&1; then
                echo_warn "Failed to install unrar. Please investigate\nInstallation will continue"
            else
                rm /tmp/unrar.deb
                echo_progress_done "Unrar installed"
            fi
        fi

        if ! which rar > /dev/null; then
            echo_warn "Rar (for creating archives) is not supported on $(_os_distro)-$(_os_arch).\nInstallation will continue."
        fi
    else
        echo_log_only "Rar seems to be installed"
    fi
}

# Returns a password for a user in case one exists.
# \
# If password is not found, returns with error code 1
function _get_user_password() {
    user_to_get="$1"
    password=''

    for file in $(find /root/ -maxdepth 1 -name '*.info' | sort); do
        if [[ -f $file ]]; then
            user_in_file=$(cat $file | cut -d: -f1)
            if [ "$user_in_file" = "$user_to_get" ]; then
                password="$(cat $file | cut -d: -f2)"
                break
            fi
        fi
    done

    if [[ -z $password ]]; then
        return 1
    fi
    echo "$password"
}

# OLD way to get users from htpasswd
# Rather wouldn't use this as 3rd party applications migh be playing with this as well
# function _get_user_list () {
#     users=($(cut -d: -f1 < /etc/htpasswd))
# }

# Returns all users managed by swizzin as a newline separated list.
# \
# This will contain the master user only once
# \
# Output e.g.:
# ```
# user1
# user2
# master
# user3
# ```
function _get_user_list() {
    output=""
    for file in $(find /root/ -maxdepth 1 -name '*.info' ! -name .master.info | sort); do
        if [[ -f $file ]]; then
            output+="$(cut -d: -f1 < "$file")\n"
        fi
    done
    output+=$(cut -d: -f1 < /root/.master.info)
    echo -e "$output" | sort | uniq
}

#Returns the username of the master
function _get_master_username() {
    cut -d: -f1 < /root/.master.info
}

# Removes a file or a directory in case it exists
#\
# Parameters:
# $1 = Full path of directory, fath or link to remove
function rm_if_exists() {
    path="$1"
    if [[ -e "$path" ]]; then
        rm -rf "$path"
    fi
}

# Finds a random free port between a range
# \
# Parameters:
# $1 = Lower bound
# $2 = Upper bounf
# \
# Returns an integer
function port() {
    LOW_BOUND=$1
    UPPER_BOUND=$2
    comm -23 <(seq ${LOW_BOUND} ${UPPER_BOUND} | sort) <(ss -Htan | awk '{print $4}' | cut -d':' -f2 | sort -u) | shuf | head -n 1
}

# Checks if there is enough RAM and Swap in total
# \
# Parameters:
# $1 = The amount of total space to require
function check_ram() {
    if [[ -z $1 ]]; then
        echo_error "Must specify a value to compare"
        return 1
    fi
    if ! dpkg -s bc > /dev/null 2>&1; then
        apt_install bc
    fi
    ramtotal=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    swaptotal=$(grep SwapTotal /proc/meminfo | awk '{print $2}')
    total=$(echo "$swaptotal + $ramtotal" | bc -l | numfmt --from-unit=1024)
    needs=$(echo $1 | numfmt --from=iec)
    if [[ $needs -gt $total ]]; then
        false
    else
        true
    fi
}

# Enables a temporary 2GB swap file
# \
# Exits if cannot continue
function check_swap_on() {
    if ! check_ram 2G; then
        echo_progress_start "Setup is enabling the use of a temporary 2GB swap file"
        dd if=/dev/zero of=/.swapfile bs=1M count=2048 > /dev/null 2>&1 || {
            echo_error "Cannot continue with install because swap file could not be created. Does device have 2GB of free space?"
            exit 1
        }
        mkswap /.swapfile > /dev/null 2>&1
        swapon /.swapfile > /dev/null 2>&1
        echo_progress_done 'Swap enabled'
    fi
}

# Disables the temporary swap file
function check_swap_off() {
    if [[ $swap == "true" ]]; then
        swapoff /.swapfile > /dev/null 2>&1
        rm -f /.swapfile > /dev/null 2>&1
    fi
}
