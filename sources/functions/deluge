#!/bin/bash

function whiptail_deluge () {
  if [[ -z $deluge ]]; then
    case $(lsb_release -cs) in
    "jessie")
      function=$(whiptail --title "Install Software" --menu "Choose a Deluge version:" --ok-button "Continue" --nocancel 12 50 3 \
                "Repo Install" "" \
                "Deluge 1.3" "" 3>&1 1>&2 2>&3)
    ;;
    *)
      function=$(whiptail --title "Install Software" --menu "Choose a Deluge version:" --ok-button "Continue" --nocancel 12 50 3 \
                "Repo Install" "" \
                "Deluge 1.3" "" \
                "Deluge 2.0" "" 3>&1 1>&2 2>&3)
    ;;
    esac
    if [[ $function == "Repo Install" ]]; then
      export deluge=repo
    elif [[ $function == "Deluge 1.3" ]]; then
      export deluge=1.3-stable
    elif [[ $function == "Deluge 2.0" ]]; then
      export deluge=master
    fi
    if [[ -n $(command -v deluged) ]]; then
      dverup=$(echo "$function" | sed 's|Deluge ||g' | cut -d. -f1)
      dvercurmajor=$(deluged -v | grep deluged | grep -oP '\d+\.\d+\.\d+' | cut -d. -f1)
      if [[ $dverup -lt $dvercurmajor ]]; then
        message="You have chosen to perform a major version DOWNGRADE to $function. Please be advised that this will downgrade your Deluge binaries to an older version which is not compatible with the new version state.\n\nIf you have never had $function installed, you will not have a backup to restore. NO TORRENTS WILL BE LOADED. This is an unsupported action and you will receive **ABSOLUTELY ZERO** support if you decide to continue.\n\nI hope you know what you're doing."
      elif [[ $dverup -gt $dvercurmajor ]]; then
        message="You have chosen to perform a major version UPGRADE to $function. Please be advised that this will upgrade your Deluge binaries to a newer version which is not compatible with the old version.\n\nA backup of your current config will be created; however, if you wish to downgrade back to the old version, you will need to restore the backup to reload your torrents. Torrents you may have added since upgrading will not be preserved.\n\nDowngrading (while possible and not disabled) is an unsupported action and you will receive **ABSOLUTELY ZERO** support if you decide to go back to the previous branch."
      fi
      if [[ -n $message ]]; then
        if ! whiptail --yesno "${message}" --yes-button "I agree" --no-button "Oh heck, nvm" --title "WARNING!!" --scrolltext 18 78; then
          exit 1
        fi
      fi
    fi
  fi

}

function whiptail_libtorrent_rasterbar () {
  if [[ -z $libtorrent ]]; then
    if [[ ! $deluge == master ]]; then
      case $(lsb_release -cs) in
        "jessie"|"stretch"|"xenial"|"bionic")
        function=$(whiptail --title "Install Software" --menu "Choose a libtorrent branch:" --ok-button "Continue" --nocancel 12 50 3 \
                    Repo "from apt" \
                    1.0 "compiled - branch RC_1_0" \
                    1.1 "compiled - branch RC_1_1" 3>&1 1>&2 2>&3)
        ;;
        *)
        function=$(whiptail --title "Install Software" --menu "Choose a libtorrent branch:" --ok-button "Continue" --nocancel 12 50 3 \
                    Repo "" \
                    1.1 "libtorrent branch RC_1_1" 3>&1 1>&2 2>&3)
        ;;
      esac
    else
      case $(lsb_release -cs) in
        "xenial")
          function=$(whiptail --title "Install Software" --menu "Choose a libtorrent branch:" --ok-button "Continue" --nocancel 12 50 3 \
                    1.1 "compiled - branch RC_1_1" \
                    1.2 "libtorrent branch RC_1_2" 3>&1 1>&2 2>&3)
        ;;
        *)
          function=$(whiptail --title "Install Software" --menu "Choose a libtorrent branch:" --ok-button "Continue" --nocancel 12 50 3 \
                    Repo "" \
                    1.1 "libtorrent branch RC_1_1" \
                    1.2 "libtorrent branch RC_1_2" 3>&1 1>&2 2>&3)
        ;;
      esac
      fi

    if [[ $function == Repo ]]; then
      export libtorrent=repo
    elif [[ $function == 1.0 ]]; then
      export libtorrent=RC_1_0
    elif [[ $function == 1.1 ]]; then
      export libtorrent=RC_1_1
    elif [[ $function == 1.2 ]]; then
      export libtorrent=RC_1_2
    fi
  fi
}

function remove_ltcheckinstall () {
  oldv=$(apt-cache show libtorrent | grep checkinstall)
  if [[ -n $oldv ]]; then
    echo "Removing checkinstall libtorrent"
    dpkg -r libtorrent
  fi
}

function build_libtorrent_rasterbar () {
  release=$(lsb_release -cs)
  . /etc/swizzin/sources/functions/fpm

  if [[ $libtorrent = "repo" ]]; then
    cleanup=(python3-libtorrent python-libtorrent libtorrent-rasterbar)
    for a in ${cleanup[@]}; do
      if dpkg -l | grep $a | grep swizzin > /dev/null 2>&1; then
        echo "Found $a. Removing."
        dpkg -r $a > /dev/null 2>&1
      fi
    done
      case $release in
          "jessie")
          apt-get install -y -q libtorrent-rasterbar7 python-libtorrent python3-libtorrent
          ;;
          "xenial")
          apt-get install -y -q libtorrent-rasterbar8 python-libtorrent python3-libtorrent
          ;;
          *)
          apt-get install -y -q libtorrent-rasterbar9 python-libtorrent python3-libtorrent
          ;;
      esac
  else
    if [[ -n $deluge ]]; then
      case $deluge in
        master)
          python=python3
          case $release in
            "stretch"|"xenial")
              configure_args="--with-boost-python=boost_python-py35"
            ;;
            *)
              configure_args="--with-boost-python=boost_python3"
            ;;
          esac
          remove=python-libtorrent
        ;;
        1.3-stable)
          python=python
          remove=python3-libtorrent
        ;;
      esac
    fi
    cleanup=($remove libtorrent-rasterbar7 libtorrent-rasterbar8 libtorrent-rasterbar9)
    for a in ${cleanup[@]}; do
      if dpkg -l | grep $a > /dev/null 2>&1; then
        echo "Found package conflict: $a. Removing."
        dpkg -r $a > /dev/null 2>&1
      fi
    done
    LTRC=$libtorrent
    LIST='build-essential autoconf automake libtool libboost-system-dev libboost-python-dev libssl-dev libgeoip-dev libboost-chrono-dev libboost-random-dev geoip-database python3-dev'
    for depend in $LIST; do
      apt-get -qq -y install $depend >>"${log}" 2>&1 || { echo "ERROR: APT-GET could not install a required package: ${depend}. That's probably not good..."; }
    done
    install_fpm
    #OpenSSL 1.1.0 might fk a lot of things up -- Requires at least libboost-1.62 to build
    #if [[ ! ${codename} =~ ("xenial")|("yakkety") ]]; then
    #  LIST='libboost-system-dev libboost-python-dev libssl-dev libgeoip-dev libboost-chrono-dev libboost-random-dev'
    #  for depend in $LIST; do
    #    apt-get -qq -y install $depend >>"${log}" 2>&1
    #  done
    #else
    #  cd /tmp
    #  wget https://sourceforge.net/projects/boost/files/boost/1.62.0/boost_1_62_0.tar.gz
    #  tar xf boost_1_62_0.tar.gz
    #  cd boost_1_62_0
    #  ./bootstrap.sh --prefix=/usr
    #  ./b2 install
    #fi

    cd /tmp
    git clone -b ${LTRC} https://github.com/arvidn/libtorrent.git >>"${log}" 2>&1
    cd libtorrent
    ./autotool.sh >>"${log}" 2>&1
    ./configure --with-lib-geoip --with-libiconv >>"${log}" 2>&1
    VERSION=$(grep "VERSION =" Jamfile | grep -oP '\d+.\d+.\d+')
    case $LTRC in
      RC_1_1)
        sed -i 's|, (arg("seconds") = 0, arg("tracker_idx") = -1, arg("flags") = 0|, (arg("seconds") = 0, arg("tracker_idx") = -1, arg("flags") = 1|g' bindings/python/src/torrent_handle.cpp
      ;;
      RC_1_2)
        sed -i 's|static constexpr reannounce_flags_t ignore_min_interval = 0_bit|static constexpr reannounce_flags_t ignore_min_interval = 1_bit|g' include/libtorrent/torrent_handle.hpp
      ;;
    esac
    make -j$(nproc) >>"${log}" 2>&1
    make DESTDIR=/tmp/dist/libtorrent install > /dev/null 2>&1
    mkdir -p /root/dist
    fpm -f -C /tmp/dist/libtorrent -p /root/dist/libtorrent-rasterbar_VERSION.deb -s dir -t deb -n libtorrent-rasterbar --version ${VERSION} --description "Libtorrent rasterbar compiled by swizzin" > /dev/null 2>&1
    dpkg -i /root/dist/libtorrent-rasterbar_${VERSION}.deb
    if [[ -n $deluge ]]; then
      echo "Building python binding ..."
      PYTHON=${python} ./configure --enable-python-binding --with-libiconv ${configure_args} >>"${log}" 2>&1
      fpm --python-bin=${python} --python-package-name-prefix=${python} -n ${python}-libtorrent -f -p /root/dist/${python}-libtorrent_VERSION.deb --version ${VERSION} --description "Libtorrent rasterbar python bindings compiled by swizzin" -s python -t deb /tmp/libtorrent/bindings/python/setup.py > /dev/null 2>&1
      dpkg -i /root/dist/${python}-libtorrent_${VERSION}.deb
    fi
    ldconfig
    cd /tmp
    rm -r libtorrent
    rm -r /tmp/dist
  fi
  if [[ ! -f /install/.libtorrent.lock ]]; then touch /install/.libtorrent.lock; fi
}

function build_deluge () {
  if [[ $deluge == repo ]]; then
    apt-get -q -y update >>"${log}" 2>&1
    apt-get -q -y install deluged deluge-web deluge-console >>"${log}" 2>&1
    chmod 644 /etc/swizzin/scripts/deluge.UpdateTracker.py
    cp /etc/swizzin/scripts/deluge.UpdateTracker.py /usr/lib/python2.7/dist-packages/deluge/ui/console/commands/update-tracker.py
    systemctl stop deluged
    update-rc.d deluged remove
    rm /etc/init.d/deluged
  else
    case $deluge in
      master)
        LIST='python3 python3-setuptools intltool python3-zope.interface python3-twisted python3-openssl python3-xdg python3-chardet python3-mako python3-setproctitle python3-rencode python3-pil librsvg2-common xdg-utils'
        pythonver=python3
        distver=python3
        args="--python-disable-dependency=pyxdg --python-disable-dependency=pyopenssl -d python3-openssl -d python3-xdg"
      ;;
      1.3-stable)
        LIST='python python-twisted python-openssl python-setuptools intltool python-xdg python-chardet python-notify python-pygame python-glade2 librsvg2-common xdg-utils python-mako'
        pythonver=python2
        distver=python2.7
        args=
      ;;
    esac
    for depend in $LIST; do
      apt-get -qq -y install $depend >>"${log}" 2>&1 || { echo "ERROR: APT-GET could not install a required package: ${depend}. That's probably not good..."; }
    done
    . /etc/swizzin/sources/functions/fpm
    install_fpm
    if [[ $pythonver == python3 ]]; then
      twistedcheck=$(python3 -c "import twisted; from pkg_resources import parse_version; print(parse_version(twisted.__version__) > parse_version(str(17.1)))")
      if [[ $twistedcheck == False ]] || [[ -z $twistedcheck ]]; then
        case $release in
          "xenial")
            echo "Packaging up-to-date python3-twisted"
            LIST='libffi-dev python3-pip'
            packages=(setuptools pycparser asn1crypto cffi constantly incremental attrs automat idna hyperlink pyhamcrest cryptography pyopenssl service_identity zope.interface twisted)
            mkdir -p /root/dist/python3
            for depend in $LIST; do
              apt-get -qq -y install $depend >>"${log}" 2>&1 || { echo "ERROR: APT-GET could not install a required package: ${depend}. That's probably not good..."; }
            done
            for d in ${packages[@]}; do
              fpm -s python -t deb --python-pip=pip3 --python-bin=${pythonver} --python-package-name-prefix=${pythonver} -f -p /root/dist/python3/python3-$d.deb $d >> ${log} 2>&1
              dpkg -i /root/dist/python3/python3-$d.deb >> ${log} 2>&1
            done
          ;;
          "stretch")
            . /etc/swizzin/sources/functions/backports
            check_debian_backports
            LIST='python3-twisted'
            for depend in $LIST; do
              apt-get -qq -y install -t stretch-backports $depend >>"${log}" 2>&1 || { echo "ERROR: APT-GET could not install a required package: ${depend}. That's probably not good..."; }
            done
          ;;
        esac
      fi
    fi
    cd /tmp
    git clone -b ${deluge} git://deluge-torrent.org/deluge.git >>"${log}" 2>&1
    cd deluge
    VERSION=$(git describe | cut -d- -f2)
    mkdir -p /root/dist
    fpm ${args} --python-fix-dependencies --python-bin=${pythonver} --python-package-name-prefix=${pythonver} --python-setup-py-arguments=--install-layout=deb -n deluge-common -f -p /root/dist/deluge-common_VERSION.deb --description "Deluge compiled by swizzin" -s python -t deb /tmp/deluge/setup.py > /dev/null 2>&1
    dpkg -i /root/dist/deluge-common_${VERSION}.deb
    chmod 644 /etc/swizzin/scripts/deluge.UpdateTracker.py
    if [[ $deluge == 1.3-stable ]]; then
      #update-tracker is built into v2 (update_tracker)
      cp /etc/swizzin/scripts/deluge.UpdateTracker.py "/usr/lib/${distver}/dist-packages/deluge/ui/console/commands/update-tracker.py"
    fi
    cd /tmp
    rm -rf deluge
    apt-mark hold deluge-common
  fi
}

function dweb_check () {
  if [[ $deluge == master ]]; then
    sed -i 's|ExecStart=.*|ExecStart=/usr/bin/deluge-web -d|g' /etc/systemd/system/deluge-web@.service
  else
    sed -i 's|ExecStart=.*|ExecStart=/usr/bin/deluge-web|g' /etc/systemd/system/deluge-web@.service
  fi
  systemctl daemon-reload
  dvermajor=$(deluged -v | grep deluged | grep -oP '\d+\.\d+\.\d+' | cut -d. -f1)
  for u in ${users[@]}; do
    localpass=$(grep localclient /home/$u/.config/deluge/auth | cut -d: -f2)
    DUDID=$(/usr/local/bin/swizzin/deluge.addHost.py)
    DPORT=$(grep daemon_port /home/$u/.config/deluge/core.conf | grep -oP '\d+' )

    case $dvermajor in
      1)
      SUFFIX=.1.2
      ;;
    esac
    if [[ -f /home/${u}/.config/deluge/hostlist.conf ]]; then
      rm /home/${u}/.config/deluge/hostlist.conf
    fi
    if [[ -f /home/${u}/.config/deluge/hostlist.conf.1.2 ]]; then
     rm /home/${u}/.config/deluge/hostlist.conf.1.2
    fi
    cat > /home/${u}/.config/deluge/hostlist.conf${SUFFIX} <<DHL
{
  "file": 3,
  "format": 1
}{
  "hosts": [
    [
      "${DUDID}",
      "127.0.0.1",
      ${DPORT},
      "localclient",
      "${localpass}"
    ]
  ]
}
DHL
    sed -i "s/\"default_daemon\":.*/\"default_daemon\": \"${DUDID}\",/g" /home/${u}/.config/deluge/web.conf
    chown -R $u: /home/${u}/.config/deluge
done
}

function ltconfig () {
  dver=$(deluged -v | grep deluged | grep -oP '\d+\.\d+\.\d+')
  mkdir -p /etc/skel/.config/deluge/plugins
  case $dver in
    1.3*)
      ltcver=0.3.1
      py=-py2.7
      if ls /etc/skel/.config/deluge/plugins/ltConfig-2* > /dev/null 2>&1; then rm -f /etc/skel/.config/deluge/plugins/ltConfig-2*; fi
      if ls /home/${u}/.config/deluge/plugins/ltConfig-2* > /dev/null 2>&1; then rm -f /home/${u}/.config/deluge/plugins/ltConfig-2*; fi
    ;;
    2.0*)
      ltcver=2.0.0
      py=
      if [[ -f /etc/skel/.config/deluge/plugins/ltConfig-0.3.1-py2.7.egg ]]; then rm -f /etc/skel/.config/deluge/plugins/ltConfig-0.3.1-py2.7.egg; fi
      if [[ -f /home/${u}/.config/deluge/plugins/ltConfig-0.3.1-py2.7.egg ]]; then rm -f /home/${u}/.config/deluge/plugins/ltConfig-0.3.1-py2.7.egg; fi
    ;;
  esac
  if [[ ! -f /etc/skel/.config/deluge/plugins/ltConfig-${ltcver}${py}.egg ]]; then
    cd /etc/skel/.config/deluge/plugins/
    wget -q https://github.com/ratanakvlun/deluge-ltconfig/releases/download/v${ltcver}/ltConfig-${ltcver}${py}.egg
  fi
  mkdir -p /home/${u}/.config/deluge/plugins
  if [[ ! -f /home/${u}/.config/deluge/plugins/ltConfig-${ltcver}${py}.egg ]]; then
    cd /home/${u}/.config/deluge/plugins/
    wget -q https://github.com/ratanakvlun/deluge-ltconfig/releases/download/v${ltcver}/ltConfig-${ltcver}${py}.egg
    chown $u: /home/${u}/.config/deluge/plugins/ltConfig-${ltcver}${py}.egg
  fi
  if grep -q user_agent /home/${u}/.config/deluge/ltconfig.conf > /dev/null 2>&1; then
    sed -i "s/Deluge[^\"]*/Deluge ${dver}/g" /home/${u}/.config/deluge/ltconfig.conf
  fi
}

function cleanup_deluge () {
  toclean=(deluge-common deluge-web deluged deluge-console)
  for p in ${toclean[@]}; do
    if dpkg -l | grep $p > /dev/null 2>&1; then
      echo "Cleaning package: $p. Removing."
      dpkg -r $p > /dev/null 2>&1
    fi
  done
}