#!/bin/bash

function whiptail_deluge () {
  if [[ -z $deluge ]]; then
    repov=$(get_candidate_version deluge)
    case $(lsb_release -cs) in
    *)
      function=$(whiptail --title "Install Software" --menu "Choose a Deluge version:" --ok-button "Continue" --nocancel 12 50 3 \
                "Repo" "(${repov})" \
                "Deluge 1.3" "" \
                "Deluge 2.0" "" 3>&1 1>&2 2>&3)
    ;;
    esac
    if [[ $function == "Repo" ]]; then
      export deluge=repo
    elif [[ $function == "Deluge 1.3" ]]; then
      export deluge=1.3-stable
    elif [[ $function == "Deluge 2.0" ]]; then
      export deluge=master
    fi
    if [[ -n $(command -v deluged) ]]; then
      dverup=$(echo "$function" | sed 's|Deluge ||g' | cut -d. -f1)
      dvercurmajor=$(deluged -v | grep deluged | grep -oP '\d+\.\d+\.\d+' | cut -d. -f1)
      if [[ $dverup -lt $dvercurmajor ]]; then
        message="You have chosen to perform a major version DOWNGRADE to $function. Please be advised that this will downgrade your Deluge binaries to an older version which is not compatible with the new version state.\n\nIf you have never had $function installed, you will not have a backup to restore. NO TORRENTS WILL BE LOADED. This is an unsupported action and you will receive **ABSOLUTELY ZERO** support if you decide to continue.\n\nI hope you know what you're doing."
      elif [[ $dverup -gt $dvercurmajor ]]; then
        message="You have chosen to perform a major version UPGRADE to $function. Please be advised that this will upgrade your Deluge binaries to a newer version which is not compatible with the old version.\n\nA backup of your current config will be created; however, if you wish to downgrade back to the old version, you will need to restore the backup to reload your torrents. Torrents you may have added since upgrading will not be preserved.\n\nDowngrading (while possible and not disabled) is an unsupported action and you will receive **ABSOLUTELY ZERO** support if you decide to go back to the previous branch."
      fi
      if [[ -n $message ]]; then
        if ! whiptail --yesno "${message}" --yes-button "I agree" --no-button "Oh heck, nvm" --title "WARNING!!" --scrolltext 18 78; then
          exit 1
        fi
      fi
    fi
  fi

}

function remove_ltcheckinstall () {
  oldv=$(apt-cache show libtorrent | grep checkinstall)
  if [[ -n $oldv ]]; then
    echo "Removing checkinstall libtorrent"
    dpkg -r libtorrent
  fi
}

function build_deluge () {
  if [[ $deluge == repo ]]; then
    apt_install deluged deluge-web deluge-console
    dver=$(deluged -v | grep deluged | grep -oP '\d+\.\d+\.\d+')
    if [[ $dver =~ ^1\. ]]; then 
        cp /etc/swizzin/scripts/deluge.UpdateTracker.py /usr/lib/python2.7/dist-packages/deluge/ui/console/commands/update-tracker.py
        chmod 644 /usr/lib/python2.7/dist-packages/deluge/ui/console/commands/update-tracker.py
    fi
    systemctl stop deluged
    update-rc.d deluged remove
    rm /etc/init.d/deluged
  else
    noexec=$(grep "/tmp" /etc/fstab | grep noexec)
    if [[ -n $noexec ]]; then
        mount -o remount,exec /tmp
        noexec=1
    fi
    case $deluge in
      master)
        LIST='python3 python3-setuptools intltool python3-zope.interface python3-twisted python3-openssl python3-xdg python3-chardet python3-mako python3-setproctitle python3-rencode python3-pil librsvg2-common xdg-utils'
        pythonver=python3
        distver=python3
        args="--python-disable-dependency=pyxdg --python-disable-dependency=pyopenssl -d python3-openssl -d python3-xdg"
      ;;
      1.3-stable)
        if [[ $release == "focal" ]]; then
          LIST='python2.7-dev intltool xdg-utils librsvg2-common'
          PIP='twisted pyopenssl setuptools pyxdg chardet notify pygame mako service_identity'
        else
          LIST='python python-twisted python-openssl python-setuptools intltool python-xdg python-chardet python-notify python-pygame python-glade2 librsvg2-common xdg-utils python-mako'
        fi
        pythonver=python2
        distver=python2.7
        args=
      ;;
    esac
        apt_install $LIST

    if [[ -n $PIP ]]; then
      . /etc/swizzin/sources/functions/pyenv
      python_getpip
      for p in $PIP; do
        pip install $p >> $log 2>&1
      done
    fi
    . /etc/swizzin/sources/functions/fpm
    install_fpm
    if [[ $pythonver == python3 ]]; then
      twistedcheck=$(python3 -c "import twisted; from pkg_resources import parse_version; print(parse_version(twisted.__version__) > parse_version(str(17.1)))")
      if [[ $twistedcheck == False ]] || [[ -z $twistedcheck ]]; then
        case $release in
          "xenial")
            echo "Packaging up-to-date python3-twisted"
            LIST='libffi-dev python3-pip'
            packages=(setuptools pycparser asn1crypto cffi constantly incremental attrs automat idna hyperlink pyhamcrest cryptography pyopenssl service_identity zope.interface twisted)
            mkdir -p /root/dist/python3
            apt_install $LIST
            for d in ${packages[@]}; do
              fpm -s python -t deb --python-pip=pip3 --python-bin=${pythonver} --python-package-name-prefix=${pythonver} -f -p /root/dist/python3/python3-$d.deb $d >> ${log} 2>&1
              dpkg -i /root/dist/python3/python3-$d.deb >> ${log} 2>&1
            done
          ;;
          "stretch")
            . /etc/swizzin/sources/functions/backports
            check_debian_backports
            set_packages_to_backports python3-twisted
            LIST='python3-twisted'
            apt_install $LIST
          ;;
        esac
      fi
      if [[ -n $noexec ]]; then
	      mount -o remount,noexec /tmp
      fi
    fi
    cd /tmp
    git clone -b ${deluge} git://deluge-torrent.org/deluge.git >>"${log}" 2>&1 || { echo "WARN: Cloning Deluge from deluge-torrent.org failed, attempting github backup."; git clone -b ${deluge} https://github.com/deluge-torrent/deluge/ >>"${log}" 2>&1 || { echo "ERROR: Cloning Deluge from github failed"; exit 1; } ; }
    cd deluge
    VERSION=$(git describe | cut -d- -f2)
    sed -i 's/-dev//g' setup.cfg
    mkdir -p /root/dist
    fpm ${args} --python-fix-dependencies --python-bin=${pythonver} --python-package-name-prefix=${pythonver} --python-setup-py-arguments=--install-layout=deb -n deluge-common -f -p /root/dist/deluge-common_VERSION.deb --description "Deluge compiled by swizzin" -s python -t deb /tmp/deluge/setup.py > /dev/null 2>&1
    dpkg -i /root/dist/deluge-common_${VERSION}.deb
    chmod 644 /etc/swizzin/scripts/deluge.UpdateTracker.py
    if [[ $deluge == 1.3-stable ]]; then
      #update-tracker is built into v2 (update_tracker)
      cp /etc/swizzin/scripts/deluge.UpdateTracker.py "/usr/lib/${distver}/dist-packages/deluge/ui/console/commands/update-tracker.py"
      chmod 644 /usr/lib/${distver}/dist-packages/deluge/ui/console/commands/update-tracker.py
    fi
    cd /tmp
    rm -rf deluge
    apt-mark hold deluge-common
  fi
}

function dweb_check () {
  if [[ $deluge == master ]]; then
    sed -i 's|ExecStart=.*|ExecStart=/usr/bin/deluge-web -d|g' /etc/systemd/system/deluge-web@.service
  else
    sed -i 's|ExecStart=.*|ExecStart=/usr/bin/deluge-web|g' /etc/systemd/system/deluge-web@.service
  fi
  systemctl daemon-reload
  dvermajor=$(deluged -v | grep deluged | grep -oP '\d+\.\d+\.\d+' | cut -d. -f1)
  for u in ${users[@]}; do
    localpass=$(grep localclient /home/$u/.config/deluge/auth | cut -d: -f2)
    DUDID=$(python2 /usr/local/bin/swizzin/deluge.addHost.py)
    DPORT=$(grep daemon_port /home/$u/.config/deluge/core.conf | grep -oP '\d+' )

    case $dvermajor in
      1)
      SUFFIX=.1.2
      ;;
    esac
    if [[ -f /home/${u}/.config/deluge/hostlist.conf ]]; then
      rm /home/${u}/.config/deluge/hostlist.conf
    fi
    if [[ -f /home/${u}/.config/deluge/hostlist.conf.1.2 ]]; then
     rm /home/${u}/.config/deluge/hostlist.conf.1.2
    fi
    cat > /home/${u}/.config/deluge/hostlist.conf${SUFFIX} <<DHL
{
  "file": 3,
  "format": 1
}{
  "hosts": [
    [
      "${DUDID}",
      "127.0.0.1",
      ${DPORT},
      "localclient",
      "${localpass}"
    ]
  ]
}
DHL
    sed -i "s/\"default_daemon\":.*/\"default_daemon\": \"${DUDID}\",/g" /home/${u}/.config/deluge/web.conf
    chown -R $u: /home/${u}/.config/deluge
done
}

function ltconfig () {
  dver=$(deluged -v | grep deluged | grep -oP '\d+\.\d+\.\d+')
  mkdir -p /etc/skel/.config/deluge/plugins
  case $dver in
    1.3*)
      ltcver=0.3.1
      py=-py2.7
      if ls /etc/skel/.config/deluge/plugins/ltConfig-2* > /dev/null 2>&1; then rm -f /etc/skel/.config/deluge/plugins/ltConfig-2*; fi
      if ls /home/${u}/.config/deluge/plugins/ltConfig-2* > /dev/null 2>&1; then rm -f /home/${u}/.config/deluge/plugins/ltConfig-2*; fi
    ;;
    2.0*)
      ltcver=2.0.0
      py=
      if [[ -f /etc/skel/.config/deluge/plugins/ltConfig-0.3.1-py2.7.egg ]]; then rm -f /etc/skel/.config/deluge/plugins/ltConfig-0.3.1-py2.7.egg; fi
      if [[ -f /home/${u}/.config/deluge/plugins/ltConfig-0.3.1-py2.7.egg ]]; then rm -f /home/${u}/.config/deluge/plugins/ltConfig-0.3.1-py2.7.egg; fi
    ;;
  esac
  if [[ ! -f /etc/skel/.config/deluge/plugins/ltConfig-${ltcver}${py}.egg ]]; then
    cd /etc/skel/.config/deluge/plugins/
    wget -q https://github.com/ratanakvlun/deluge-ltconfig/releases/download/v${ltcver}/ltConfig-${ltcver}${py}.egg
  fi
  mkdir -p /home/${u}/.config/deluge/plugins
  if [[ ! -f /home/${u}/.config/deluge/plugins/ltConfig-${ltcver}${py}.egg ]]; then
    cd /home/${u}/.config/deluge/plugins/
    wget -q https://github.com/ratanakvlun/deluge-ltconfig/releases/download/v${ltcver}/ltConfig-${ltcver}${py}.egg
    chown $u: /home/${u}/.config/deluge/plugins/ltConfig-${ltcver}${py}.egg
  fi
  if grep -q user_agent /home/${u}/.config/deluge/ltconfig.conf > /dev/null 2>&1; then
    sed -i "s/Deluge[^\"]*/Deluge ${dver}/g" /home/${u}/.config/deluge/ltconfig.conf
  fi
}

function cleanup_deluge () {
  toclean=(deluge-common deluge-web deluged deluge-console)
  for p in ${toclean[@]}; do
    if dpkg -l | grep $p > /dev/null 2>&1; then
      echo "Cleaning package: $p. Removing."
      dpkg -r $p > /dev/null 2>&1
    fi
  done
}
