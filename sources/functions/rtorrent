#!/bin/bash

export distribution=$(lsb_release -is)
export release=$(lsb_release -rs)
export codename=$(lsb_release -cs)

function whiptail_rtorrent() {
    if [[ -z $rtorrentver ]] && [[ -z $1 ]]; then
        repov=$(get_candidate_version rtorrent)

        whiptail --title "rTorrent Install Advisory" --msgbox "We recommend rTorrent version selection instead of repo (distro) releases. They will compile additional performance and stability improvements in 90s. UDNS includes a stability patch for UDP trackers on rTorrent." 15 50

        function=$(whiptail --title "Choose an rTorrent version" --menu "All versions other than repo will be locally compiled from source" --ok-button "Continue" 14 50 5 \
            0.9.8 "" \
            0.9.7 "" \
            0.9.6 "" \
            UDNS "(0.9.8)" \
            Repo "(${repov})" 3>&1 1>&2 2>&3) || {
            echo_error "rTorrent version choice aborted"
            exit 1
        }

        case $function in
            0.9.6)
                export rtorrentver='0.9.6'
                export libtorrentver='0.13.6'
                export libudns='false'
                ;;

            0.9.7)
                export rtorrentver='0.9.7'
                export libtorrentver='0.13.7'
                export libudns='false'
                ;;

            0.9.8)
                export rtorrentver='0.9.8'
                export libtorrentver='0.13.8'
                export libudns='false'
                ;;

            UDNS)
                export rtorrentver='0.9.8'
                export libtorrentver='0.13.8'
                export libudns='true'
                ;;

            Repo)
                export rtorrentver='repo'
                export libtorrentver='repo'
                export libudns='false'
                ;;

            *)
                echo_error "$function is not a valid rTorrent version"
                exit 1
                ;;
        esac
    fi
}

function configure_rtorrent() {
    # Link time optimizations for 4 plus threads
    if [ $(nproc) -ge 4 ]; then
        export rtorrentflto="-flto=$(nproc)"
    else
        export rtorrentflto=""
    fi
    # pipe optimizations for 512MB plus memory
    memory=$(awk '/MemAvailable/ {printf( "%.f\n", $2 / 1024 )}' /proc/meminfo)
    if [[ $memory > 512 ]]; then
        export rtorrentpipe="-pipe"
    else
        export rtorrentpipe=""
    fi
    # GCC optimization level for program compilation
    if [ $(nproc) -le 2 ]; then
        export rtorrentlevel="-O1"
    else
        export rtorrentlevel="-O2"
    fi
}

function depends_rtorrent() {
    build_deps_rtorrent
    sources_rtorrent
    # wait for tasks to complete if less than 4 threads, otherwise it will take longer
    if [ $(nproc) -lt 4 ]; then
        wait
    fi
    # package installation of dependencies
    if [[ ! $rtorrentver == repo ]]; then
        APT='subversion dos2unix bc screen zip unzip sysstat build-essential comerr-dev
    dstat automake libtool libcppunit-dev libssl-dev pkg-config libcurl4-openssl-dev
    libsigc++-2.0-dev unzip curl libncurses5-dev yasm fontconfig libfontconfig1
    libfontconfig1-dev mediainfo'
        apt_install $APT

        . /etc/swizzin/sources/functions/fpm
        install_fpm
    else
        APT='screen zip unzip bc mediainfo curl'
        apt_install $APT
    fi
    # Wait for tasks to complete
    wait
    log_deps_rtorrent
}
function build_deps_rtorrent() {
    # mktorrent and libudns from source
    echo_info "Building source dependencies"
    mklog="/root/logs/mktorrent.log"
    udnslog="/root/logs/libudns.log"
    bash "/etc/swizzin/sources/build/mktorrent.sh" $mklog &
    if [[ ${libudns} == "true" ]]; then
        bash "/etc/swizzin/sources/build/libudns.sh" $udnslog &
    fi
}
function sources_rtorrent() {
    echo_info "Preparing source files"
    # Create logging and temp paths for xmlrpc, libtorrent and rtorrent
    rt_create_source_paths
    # Prepare xmlrpc, libtorrent and rtorrent source files
    bash "/etc/swizzin/sources/build/prepare_xmlrpc.sh" $xlog $xpath &
    bash "/etc/swizzin/sources/build/prepare_lt_rakshasa.sh" $llog $lelog $lpath $libtorrentver $libudns &
    bash "/etc/swizzin/sources/build/prepare_rtorrent.sh" $rlog $relog $rpath $rtorrentver $libudns &
}
function rt_create_source_paths() {
    # XMLRPC-C
    xlog="/root/logs/xmlrpc.log"
    xpath="/tmp/xmlrpc-c"
    # Libtorrent
    llog="/root/logs/lt_rakshasa.log"
    lelog="/root/logs/lt_rkshasa_errors.log"
    lpath="/tmp/libtorrent"
    # rTorrent
    rlog="/root/logs/rtorrent.log"
    relog="/root/logs/rtorrent_errors.log"
    rpath="/tmp/rtorrent"
}
function log_deps_rtorrent() {
    # Append output to swizzin log file and remove log files
    rt_log_append "mktorrent" $mklog "build"
    if [[ ${libudns} == "true" ]]; then
        rt_log_append "libudns" $udnslog "build"
    fi
    rt_log_append "xmlrc" $xlog "prepare"
    rt_log_append "libtorrent" $llog "prepare"
    rt_log_append "rtorrent" $rlog "prepare"
    # Check for errors, remove error files
    rt_error_check $lelog
    rt_error_check $relog
    # Exit script if error is found when checking
    if [[ $rtinstallerror == "true" ]]; then
        exit 1
    fi
}
function rt_log_append() {
    local binary=$1
    local file=$2
    local type=$3
    echo -e "\nBegin of $binary $type log" >> $log 2>&1
    cat $file >> $log 2>&1
    echo -e "End of $binary $type log\n" >> $log 2>&1
    . /etc/swizzin/sources/functions/utils
    rm_if_exists $file
}
function rt_error_check() {
    local file=$1
    rtinstallerror="false"
    . /etc/swizzin/sources/functions/utils
    if [[ $(grep -c "PASSED" $file) -lt 1 ]]; then
        local error=$(cat $file)
        echo_error $error
        rtinstallerror="true"
    fi
    rm_if_exists $file
}

function build_xmlrpc-c() {
    cd $xpath
    ./configure --prefix=/usr --disable-cplusplus --disable-wininet-client --disable-libwww-client >> $log 2>&1 || {
        echo_error "Something went wrong while configuring xmlrpc"
        exit 1
    }
    source <(sed 's/ //g' version.mk)
    VERSION=$XMLRPC_MAJOR_RELEASE.$XMLRPC_MINOR_RELEASE.$XMLRPC_POINT_RELEASE
    make -j$(nproc) CFLAGS="-w ${rtorrentflto} ${rtorrentpipe}" >> $log 2>&1
    make DESTDIR=/tmp/dist/xmlrpc-c install >> $log 2>&1 || {
        echo_error "Something went wrong while making xmlrpc"
        exit 1
    }
    mkdir -p /root/dist
    fpm -f -C /tmp/dist/xmlrpc-c -p /root/dist/xmlrpc-c_VERSION.deb -s dir -t deb -n xmlrpc-c --version ${VERSION} --description "xmlrpc-c compiled by swizzin" > /dev/null 2>&1
    dpkg -i /root/dist/xmlrpc-c_${VERSION}.deb >> $log 2>&1
    rm -rf $xpath
    rm -rf /tmp/dist/xmlrpc-c
}

function build_libtorrent_rakshasa() {
    VERSION=$libtorrentver
    cd $lpath
    ./configure --prefix=/usr >> $log 2>&1 || {
        echo_error "Something went wrong while configuring libtorrent"
        exit 1
    }
    make -j$(nproc) CXXFLAGS="-w ${rtorrentlevel} ${rtorrentflto} ${rtorrentpipe}" >> $log 2>&1 || {
        echo_error "Something went wrong while making libtorrent"
        exit 1
    }
    rm_if_exists "/tmp/dist/libtorrent-rakshasa"
    make DESTDIR=/tmp/dist/libtorrent-rakshasa install >> $log 2>&1
    mkdir -p /root/dist
    fpm -f -C /tmp/dist/libtorrent-rakshasa -p /root/dist/libtorrent-rakshasa_VERSION.deb -s dir -t deb -n libtorrent-rakshasa --version ${VERSION} --description "libtorrent-rakshasa compiled by swizzin" > /dev/null 2>&1
    dpkg -i /root/dist/libtorrent-rakshasa_${VERSION}.deb >> $log 2>&1
    rm -rf /tmp/dist/libtorrent-rakshasa
    rm -rf $lpath
}

function build_rtorrent() {
    cd $rpath
    VERSION=$rtorrentver
    stdc=
    if [[ ${rtorrentver} == "0.9.6" ]]; then
        stdc="-std=c++11"
    fi
    ./configure --prefix=/usr --with-xmlrpc-c >> $log 2>&1 || {
        echo_error "Something went wrong while configuring rtorrent"
        exit 1
    }
    make -j$(nproc) CXXFLAGS="-w ${rtorrentlevel} ${rtorrentflto} ${rtorrentpipe} ${stdc}" >> $log 2>&1 || {
        echo_error "Something went wrong while making rtorrent"
        exit 1
    }
    rm_if_exists "/tmp/dist/rtorrent"
    make DESTDIR=/tmp/dist/rtorrent install >> $log 2>&1
    mkdir -p /root/dist
    fpm -f -C /tmp/dist/rtorrent -p /root/dist/rtorrent_VERSION.deb -s dir -t deb -n rtorrent --version ${VERSION} --description "rtorrent compiled by swizzin" > /dev/null 2>&1
    dpkg -i /root/dist/rtorrent_${VERSION}.deb >> $log 2>&1
    ldconfig >> $log 2>&1
    rm -rf $rpath >> $log 2>&1
    rm -rf /tmp/dist/rtorrent
    rm_if_exists /root/dist
    rm_if_exists /tmp/dist
    apt-mark hold rtorrent >> ${log} 2>&1
}

function rtorrent_apt() {
    apt_install rtorrent
}

function remove_rtorrent() {
    toclean=(rtorrent libtorrent-rakshasa)
    repo=$(dpkg -l | grep -P libtorrent'\d+' | awk '{print $2}' | cut -d: -f1)
    if [[ -n $repo ]]; then
        toclean+=($repo)
    fi
    apt_remove --purge $toclean
}

function remove_rtorrent_legacy() {
    # Create logging and temp paths for xmlrpc and libtorrent
    rt_create_source_paths
    # Run prepare script to remove xmlrpc and libtorrent using make uninstall
    bash "/etc/swizzin/sources/build/prepare_xmlrpc.sh" $xlog $xpath &
    bash "/etc/swizzin/sources/build/prepare_lt_rakshasa.sh" $llog "/dev/null" $lpath "0.13.8" "false" &
    # Remove rtorrent from the bin file
    rm -rf /usr/bin/rtorrent >> $log 2>&1
    # Wait for make uninstall to complete
    wait
    # Log our actions and remove temp files
    rt_log_append "xmlrc" $xlog "remove"
    rt_log_append "libtorrent" $llog "remove"
    rm_if_exists $xpath
    rm_if_exists $lpath
}
