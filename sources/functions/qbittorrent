#!/bin/bash

function whiptail_qbittorrent() {
    if [[ -z $QBITTORRENT_VERSION ]]; then
        . /etc/swizzin/sources/functions/apt
        codename=$(_os_codename)
        releases=$(git ls-remote -t --refs https://github.com/qbittorrent/qBittorrent.git | awk '{sub("refs/tags/release-", ""); print $2 }' | grep -v -e "beta" -e "rc" | sort -Vr)

        latestv41=$(echo "$releases" | grep -m1 -oP '4\.1\.\d?.?\d')
        latestv42=$(echo "$releases" | grep -m1 -oP '4\.2\.\d?.?\d')
        latestv43=$(echo "$releases" | grep -m1 -oP '4\.3\.\d?.?\d')
        #latestv=$(echo "$releases" | grep -m1 -oP '\d.\d?.?\d?.?\d')
        repov=$(get_candidate_version qbittorrent-nox)
        case ${codename} in
            "xenial" | "stretch")
                #We can't go past 4.3.1 due to openssl and c++ requirements
                function=$(
                    whiptail --title "Install Software" --menu "Choose a qBittorrent version:" --ok-button "Continue" --nocancel 12 50 3 \
                        "Repo" "${repov}" \
                        "4.1" "(${latestv41})" \
                        "4.2" "(${latestv42})" \
                        "4.3.1" "(4.3.1)" 3>&1 1>&2 2>&3
                )
                ;;
            *)
                function=$(whiptail --title "Install Software" --menu "Choose a qBittorrent version:" --ok-button "Continue" --nocancel 12 50 4 \
                    "Repo" "${repov}" \
                    "4.1" "(${latestv41})" \
                    "4.2" "(${latestv42})" \
                    "4.3" "(${latestv43})" 3>&1 1>&2 2>&3)
                #"Latest" "(${latestv})" 3>&1 1>&2 2>&3)
                ;;
        esac
        case $function in
            #Latest)
            #export QBITTORRENT_VERSION=${latestv}
            #;;
            4.1)
                export QBITTORRENT_VERSION=${latestv41}
                ;;
            4.2)
                export QBITTORRENT_VERSION=${latestv42}
                ;;
            4.3)
                export QBITTORRENT_VERSION=${latestv43}
                ;;
            4.3.1)
                export QBITTORRENT_VERSION=4.3.1
                ;;
            Repo)
                export QBITTORRENT_VERSION=repo
                ;;
            *)
                echo_error "Function not supported"
                exit 1
                ;;
        esac
    fi
}

function qbittorrent_version_info() {
    if [[ ${QBITTORRENT_VERSION} == "latest" ]]; then
        releases=$(git ls-remote -t --refs https://github.com/qbittorrent/qBittorrent.git | awk '{sub("refs/tags/release-", ""); print $2 }' | grep -v -e "beta" -e "rc" | sort -Vr)
        latestv43=$(echo "$releases" | grep -m1 -oP '4\.3\.\d?.?\d')
        QBITTORRENT_VERSION=${latestv43}
    fi
    case $QBITTORRENT_VERSION in
        4.1.*)
            libtorrent_branch=RC_1_1
            libtorrent_minimum_version=1.1.0
            libtorrent_maximum_version=1.1.14
            stdcver="c++14"
            qt_minimum_version=5.5
            cryptography_type=built-in
            ;;
        4.2.*)
            libtorrent_branch=RC_1_2
            libtorrent_minimum_version=1.2.0
            stdcver="c++14"
            qt_minimum_version=5.9
            cryptography_type=built-in
            ;;
        4.3.[012]*)
            libtorrent_branch=RC_1_2
            libtorrent_minimum_version=1.2.11
            stdcver="c++14"
            qt_minimum_version=5.9
            cryptography_type=built-in
            ;;
        4.3.3)
            libtorrent_branch=RC_1_2
            libtorrent_minimum_version=1.2.11
            stdcver="c++17"
            qt_minimum_version=5.9
            cryptography_type=built-in
            ;;
        4.3.*)
            libtorrent_branch=RC_1_2
            libtorrent_minimum_version=1.2.12
            stdcver="c++17"
            qt_minimum_version=5.12
            cryptography_type=built-in
            ;;
        4.4.*)
            libtorrent_branch=RC_2_0
            libtorrent_minimum_version=2.0
            stdcver="c++17"
            qt_minimum_version=5.12
            cryptography_type=built-in
            ;;
        *)
            echo_error "qBittorrent version should be between 4.1.*(.*) and 4.3.*(.*) -- Setup will not proceed."
            exit 1
            ;;
    esac
}

function skip_libtorrent_qbittorrent() {
    if [[ -f /usr/local/lib/libtorrent-rasterbar.a ]]; then
        libtorrent_current_version=$(strings /usr/local/lib/libtorrent-rasterbar.a | grep -m1 -P 'libtorrent/\d+\.\d+\.\d+\.\d+' | cut -d/ -f2)
        if [[ -n $libtorrent_maximum_version ]]; then
            if dpkg --compare-versions ${libtorrent_current_version} ge ${libtorrent_minimum_version} && dpkg --compare-versions ${libtorrent_current_version} le ${libtorrent_maximum_version}; then
                if dpkg -s libtorrent-rasterbar | grep -q ${stdcver} && whiptail_skip_libtorrent_rasterbar; then
                    return
                fi
            fi
        else
            if dpkg --compare-versions ${libtorrent_current_version} ge ${libtorrent_minimum_version}; then
                if dpkg -s libtorrent-rasterbar | grep -q ${stdcver} && whiptail_skip_libtorrent_rasterbar; then
                    return
                fi
            fi
        fi
    fi
    false
    return
}

function install_qt() {
    qt_repo_version=$(get_candidate_version qtbase5-dev)
    if ! dpkg --compare-versions ${qt_repo_version} ge ${qt_minimum_version}; then
        build_qt
        QT_METHOD=swizzin
    else
        LIST='qtbase5-dev qttools5-dev-tools'
        apt_install $LIST
        #If we're installing from repo then we can remove these (i.e. dist-upgrade or qbit downgrade)
        dpkg -r qtbase5-swizzin > /dev/null 2>&1
        dpkg -r qttools5-swizzin > /dev/null 2>&1
        QT_METHOD=repo
    fi

}

function build_qt() {
    cd /tmp
    QT_PREFIX=/usr/local/qt
    case $(_os_codename) in
        xenial | stretch)
            qt_branch=5.12
            ;;
        *)
            #6.0 requires CMake 3.18
            qt_branch=5.15
            ;;
    esac
    QT_VERSION=$(git ls-remote -t --refs https://github.com/qt/qtbase | awk '{sub("refs/tags/v", ""); print $2}' | grep ${qt_branch} | sort -Vr | grep -m1 -v -e "alpha" -e "beta" -e "rc")
    if ! skip_qt; then
        echo_progress_start "Compiling qtbase5-swizzin v${QT_VERSION}"
        git clone --depth 1 -b v${QT_VERSION} --recurse-submodules https://github.com/qt/qtbase /tmp/qtbase >> ${log} 2>&1 || {
            echo_error "qtbase5 could not be cloned from github. Setup will not proceed"
            exit 1
        }
        cd /tmp/qtbase
        apt_install libssl-dev
        ./configure --prefix=${QT_PREFIX} -opensource -confirm-license -openssl-linked -c++std ${stdcver} -release -qt-pcre -no-iconv -no-feature-glib -no-feature-opengl -no-feature-dbus -no-feature-gui -no-feature-widgets -no-feature-testlib -no-compile-examples >> ${log} 2>&1
        make -j$(nproc) >> ${log} 2>&1
        make INSTALL_ROOT=/tmp/dist/qtbase install >> ${log} 2>&1
        tag=" ${stdcver}"
        fpm -f -C /tmp/dist/qtbase -p /root/dist/qtbase5-swizzin_VERSION.deb -s dir -t deb -n qtbase5-swizzin --version ${QT_VERSION} --description "qtbase5 compiled by swizzin$tag" >> ${log} 2>&1
        cd /tmp
        rm -rf /tmp/qtbase
        rm -rf /tmp/dist/qtbase
        dpkg -i /root/dist/qtbase5-swizzin_${QT_VERSION}.deb >> ${log} 2>&1 || {
            echo_error "qtbase5-swizzin could not be installed. Setup will not proceed"
            exit 1
        }
        echo_progress_done "qtbase5-swizzin installed"
        echo_progress_start "Compiling qttools5-swizzin v${QT_VERSION}"
        git clone --depth 1 -b $QT_VERSION --recurse-submodules https://github.com/qt/qttools /tmp/qttools >> ${log} 2>&1 || {
            echo_error "qttools5 could not be cloned from github. Setup will not proceed"
            exit 1
        }
        cd /tmp/qttools
        ${QT_PREFIX}/bin/qmake -set prefix ${QT_PREFIX} >> ${log} 2>&1
        ${QT_PREFIX}/bin/qmake >> ${log} 2>&1
        make -j$(nproc) >> ${log} 2>&1
        make INSTALL_ROOT=/tmp/dist/qttools install >> ${log} 2>&1
        fpm -f -C /tmp/dist/qttools -p /root/dist/qttools5-swizzin_VERSION.deb -s dir -t deb -n qttools5-swizzin --version ${QT_VERSION} --description "qttools5 compiled by swizzin$tag" >> ${log} 2>&1
        cd /tmp
        rm -rf /tmp/qttools
        rm -rf /tmp/dist/qttools
        dpkg -i /root/dist/qttools5-swizzin_${QT_VERSION}.deb >> ${log} 2>&1 || {
            echo_error "qttools5-swizzin could not be installed. Setup will not proceed"
            exit 1
        }
        echo_progress_done "qttools5-swizzin installed"
    fi
}

function skip_qt() {
    if dpkg -s qtbase5-swizzin 2> /dev/null | grep -q ${stdcver}; then
        qt_local_version=$(dpkg -s qtbase5-swizzin | grep ^Version | grep ^Version | awk '{print $2}')
        if dpkg --compare-versions ${qt_local_version} ge ${QT_VERSION}; then
            return
        elif dpkg --compare-versions ${qt_local_version} ge ${qt_minimum_version} && whiptail_skip_qt; then
            return
        fi
    fi
    false
    return

}

function whiptail_skip_qt() {
    if (whiptail --title "Skip QT Compile?" --yesno "Setup has determined that you can save some time by skipping the compilation of QT dependencies as they are already sufficient but out of date. Do you want to?" 12 50); then
        true
    else
        false
    fi
}

function build_libtorrent_qbittorrent() {
    rm_if_exists /tmp/libtorrent
    booststrap
    echo "using gcc : : : <cflags>\"-march=native -std=${stdcver}\" <cxxflags>\"-march=native -std=${stdcver}\" ;" > /root/user-config.jam

    git clone -b ${libtorrent_branch} https://github.com/arvidn/libtorrent /tmp/libtorrent >> ${log} 2>&1 || {
        echo_error "Libtorrent could not be cloned from git. Setup will not proceed"
        exit 1
    }

    cd /tmp/libtorrent
    if [[ -f /root/libtorrent-${libtorrent_branch}.patch ]]; then
        patch -p1 < /root/libtorrent-${libtorrent_branch}.patch >> ${log} 2>&1 || {
            echo _error "Something went wrong when patching libtorrent"
            exit 1
        }
        echo_info "Libtorrent patch found and applied!"
    else
        echo_log_only "No libtorrent patch found at /root/libtorrent-${libtorrent_branch}.patch"
    fi
    if [[ ${libtorrent_branch} == "RC_1_1" ]]; then
        #Dirty hack to ensure finished library uses `libtorrent-rasterbar` for its name in the deprecated 1.1 branch
        sed -i 's/virtual-target.add-prefix-and-suffix $(name)/virtual-target.add-prefix-and-suffix $(name)-rasterbar/g' Jamfile
    fi
    VERSION=$(grep AC_INIT configure.ac | grep -oP '\d+\.\d+\.\d+')
    /opt/boost_${BOOST_VERSION}/b2 -j$(nproc) crypto=${cryptography_type} variant=release link=static install --prefix=/tmp/dist/libtorrent/usr/local install >> ${log} 2>&1
    tag=" static with ${stdcver} march=native"
    mkdir -p /root/dist
    fpm -f -C /tmp/dist/libtorrent -p /root/dist/libtorrent-rasterbar_VERSION.deb -s dir -t deb -n libtorrent-rasterbar --version ${VERSION} --description "Libtorrent rasterbar compiled by swizzin$tag" >> ${log} 2>&1
    cd /tmp
    rm_if_exists /tmp/libtorrent
    rm_if_exists /tmp/dist
    dpkg -i /root/dist/libtorrent-rasterbar_${VERSION}.deb >> ${log} 2>&1 || {
        echo_error "Libtorrent could not be installed. Setup will not proceed"
        exit 1
    }
}

function build_qbittorrent() {
    noexec=$(grep "/tmp" /etc/fstab | grep noexec)
    if [[ -n $noexec ]]; then
        mount -o remount,exec /tmp
        noexec=1
    fi
    VERSION=${QBITTORRENT_VERSION}
    LIST='build-essential automake pkg-config libtool git zlib1g-dev libssl-dev libgeoip-dev python3 zlib1g-dev'

    apt_install --no-recommends $LIST
    rm_if_exists "/tmp/qbittorrent"
    wget -O /tmp/release-${VERSION}.tar.gz https://github.com/qbittorrent/qBittorrent/archive/release-${VERSION}.tar.gz >> "${log}" 2>&1 || {
        echo_error "qBittorrent could not be downloaded. Setup will not proceed"
        exit 1
    }
    mkdir -p /tmp/qbittorrent
    tar -xvf /tmp/release-${VERSION}.tar.gz -C /tmp/qbittorrent --strip-components=1 >> $log 2>&1
    rm -rf /tmp/release-${VERSION}.tar.gz

    cd /tmp/qbittorrent
    tag=" static with ${stdcver} march=native"
    #Ensure boost variables are loaded (i.e. libtorrent skipped)
    booststrap
    if [[ $QT_METHOD == "swizzin" ]]; then
        ./configure --prefix=/usr --disable-gui --with-boost=${BOOST_ROOT} --with-boost-libdir="/usr/local/lib" libtorrent_CFLAGS="-I/usr/local/include -I${BOOST_ROOT}" libtorrent_LIBS="-L/usr/local/lib -l:libtorrent-rasterbar.a" CXXFLAGS="-march=native -std=${stdcver}" QT_QMAKE="${QT_PREFIX}/bin" >> ${log} 2>&1
    elif [[ $QT_METHOD == "repo" ]]; then
        ./configure --prefix=/usr --disable-gui --with-boost=${BOOST_ROOT} --with-boost-libdir="/usr/local/lib" libtorrent_CFLAGS="-I/usr/local/include -I${BOOST_ROOT}" libtorrent_LIBS="-L/usr/local/lib -l:libtorrent-rasterbar.a" CXXFLAGS="-march=native -std=${stdcver}" >> ${log} 2>&1
    fi
    make -j$(nproc) >> $log 2>&1
    make INSTALL_ROOT=/tmp/dist/qbittorrent install >> ${log} 2>&1
    mkdir -p /root/dist
    fpm -f -C /tmp/dist/qbittorrent -p /root/dist/qbittorrent-nox_VERSION.deb -s dir -t deb -n qbittorrent-nox --version ${VERSION} --description "qbittorrent-nox compiled by swizzin$tag" >> ${log} 2>&1
    dpkg -i /root/dist/qbittorrent-nox_${VERSION}.deb >> ${log} 2>&1 || {
        echo_error "qBittorrent could not be installed. Setup will not proceed"
        exit 1
    }
    cd /tmp
    rm_if_exists /tmp/qbittorrent
    rm_if_exists /tmp/dist
    if [[ -n $noexec ]]; then
        mount -o remount,noexec /tmp
    fi
}

function qbittorrent_service() {
    if [[ ! -f /etc/systemd/system/qbittorent@.service ]]; then
        type=simple
        if [[ $(systemctl --version | awk 'NR==1 {print $2}') -ge 240 ]]; then
            type=exec
        fi
        cat > /etc/systemd/system/qbittorrent@.service << EOQBS
[Unit]
Description=qBittorrent-nox service for %i
Documentation=man:qbittorrent-nox(1)
Wants=network-online.target
After=network-online.target nss-lookup.target

[Service]
Type=$type
User=%i
Group=%i
ExecStart=/usr/bin/qbittorrent-nox

[Install]
WantedBy=multi-user.target
EOQBS
    fi
}

function qbittorrent_user_config() {
    user=$1
    local_packages=/usr/local/bin/swizzin
    qbtv=$(qbittorrent-nox --version | grep -oP '\d+\.\d+\.\d+')
    password=$(_get_user_password ${user})
    if dpkg --compare-versions ${qbtv} lt 4.2.0; then
        hashed=$(echo -n "$password" | md5sum | awk '{print $1}')
        QBTWP="WebUI\Password_ha1=@ByteArray($hashed)"
    else
        hashed=$(python3 ${local_packages}/qbittorrent.Userpass.py ${password})
        QBTWP="WebUI\Password_PBKDF2=\"@ByteArray($hashed)\""
    fi

    usermod -a -G ${user} www-data 2>> $log
    port=$(port 10000 11000)
    mkdir -p /home/${user}/.config/qBittorrent/
    mkdir -p /home/${user}/torrents/qbittorrent
    chown ${user}: /home/${user}/torrents
    chown ${user}: /home/${user}/torrents/qbittorrent
    chown $user: /home/${user}/.config
    chown $user: /home/${user}/.config/qBittorrent
    cat > /home/${user}/.config/qBittorrent/qBittorrent.conf << QBTCONF
[BitTorrent]
Session\DisableAutoTMMByDefault=false 

[Preferences]
Bittorrent\MaxConnecs=-1
Bittorrent\MaxConnecsPerTorrent=-1
Bittorrent\MaxUploads=-1
Bittorrent\MaxUploadsPerTorrent=-1
Downloads\SavePath=/home/${user}/torrents/qbittorrent/
Queueing\QueueingEnabled=false
WebUI\Address=*
WebUI\AlternativeUIEnabled=false
WebUI\BanDuration=3600
WebUI\CSRFProtection=true
WebUI\ClickjackingProtection=true
WebUI\LocalHostAuth=true
WebUI\MaxAuthenticationFailCount=5
${QBTWP}
WebUI\Port=${port}
WebUI\RootFolder=
WebUI\SecureCookie=true
WebUI\ServerDomains=*
WebUI\SessionTimeout=3600
WebUI\UseUPnP=true
WebUI\Username=${user}
QBTCONF
}

function qbittorrent_chpasswd() {
    user=$1
    password=$2
    local_packages=/usr/local/bin/swizzin
    qbtv=$(qbittorrent-nox --version 2> /dev/null | grep -oP '\d+\.\d+\.\d+' || echo '0.0.0.0')
    active=$(systemctl is-active qbittorrent@${user})
    if dpkg --compare-versions ${qbtv} lt 4.2.0; then
        hashed=$(echo -n "$password" | md5sum | awk '{print $1}')
        QBTWP="WebUI\\\Password_ha1=@ByteArray($hashed)"
    else
        hashed=$(python3 ${local_packages}/qbittorrent.Userpass.py ${password})
        QBTWP="WebUI\\\Password_PBKDF2=\"@ByteArray($hashed)\""
    fi
    systemctl stop qbittorrent@${user}
    sed -i "s|WebUI\\\Password.*|$QBTWP|g" /home/${user}/.config/qBittorrent/qBittorrent.conf
    if [[ $active == "active" ]]; then
        systemctl start qbittorrent@${user}
    fi
}
