#!/bin/bash
# Upgrade curl to bypass the bug in Debian 10. Can be used on any system however, but the benefit is to Buster users most

configure_curl() {
    apt_install cmake libssl-dev libnghttp2-dev libzstd-dev libldap2-dev libssh2-1-dev libpsl-dev
}

build_cares() {
    cd /tmp

    . /etc/swizzin/sources/functions/utils
    cares_latest=$(git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' https://github.com/c-ares/c-ares.git | grep cares | grep -o '[^/^{}]*$' | tail --lines=1)
    cares_tar=${cares_latest/cares/c-ares}

    wget -q -O /tmp/cares.tar.gz https://github.com/c-ares/c-ares/releases/download/${cares_latest}/${cares_tar//_/.}.tar.gz >> ${log} 2>&1 || {
        echo_error "There was an error downloading c-ares! Please check the log for more info"
        rm /tmp/cares.tar.gz >> $log 2>&1
        exit 1
    }

    mkdir -p /tmp/cares
    tar -xzf /tmp/cares.tar.gz -C /tmp/cares --strip-components=1 >> $log 2>&1
    rm /tmp/cares.tar.gz

    cd /tmp/cares
    rm CMakeCache.txt >> $log 2>&1

    cmake . -D CARES_STATIC=ON -D CARES_SHARED=OFF -D CARES_STATIC_PIC=ON -D CMAKE_BUILD_TYPE:STRING="Release" -D CMAKE_C_FLAGS_RELEASE:STRING="-w -O3 -flto=\"$(nproc)\" -march=native" >> ${log} 2>&1 || {
        echo_error "There was an error configuring c-ares! Please check the log for more info"
        cd /tmp
        rm -rf /tmp/cares >> $log 2>&1
        exit 1
    }
    cmake --build . --clean-first --parallel $(nproc) >> ${log} 2>&1 || {
        echo_error "There was an error compiling c-ares! Please check the log for more info"
        cd /tmp
        rm -rf /tmp/cares >> $log 2>&1
        exit 1
    }
    make install >> ${log} 2>&1 >> $log 2>&1

    cd /tmp
    rm -rf /tmp/cares >> $log 2>&1
}

build_curl() {
    cd /tmp

    wget -q -O /tmp/curl.zip https://salsa.debian.org/debian/curl/-/archive/debian/bullseye-backports/curl-debian-bullseye-backports.zip >> ${log} 2>&1 || {
        echo_error "There was an error downloading curl! Please check the log for more info"
        rm /tmp/curl.zip >> $log 2>&1
        exit 1
    }

    unzip -q /tmp/curl.zip -d /tmp >> $log 2>&1
    rm /tmp/curl.zip

    cd /tmp/curl-debian-bullseye-backports
    rm CMakeCache.txt >> $log 2>&1

    cmake . -D ENABLE_ARES=ON -D ENABLE_WEBSOCKETS=ON -D CURL_LTO=ON -D CURL_USE_OPENSSL=ON -D CURL_USE_OPENLDAP=ON -D CURL_BROTLI=ON -D CURL_ZSTD=ON -D CURL_USE_LIBPSL=ON -D USE_NGHTTP2=ON -D BUILD_SHARED_LIBS=OFF -D CMAKE_BUILD_TYPE:STRING="Release" -D CMAKE_C_FLAGS_RELEASE:STRING="-w -O3 -flto=\"$(nproc)\" -march=native" >> ${log} 2>&1 || {
        echo_error "There was an error configuring curl! Please check the log for more info"
        cd /tmp
        rm -rf /tmp/curl-* >> $log 2>&1
        exit 1
    }
    cmake --build . --clean-first --parallel $(nproc) >> ${log} 2>&1 || {
        echo_error "There was an error compiling curl! Please check the log for more info"
        cd /tmp
        rm -rf /tmp/curl-* >> $log 2>&1
        exit 1
    }
    make install >> ${log} 2>&1 >> $log 2>&1

    cd /tmp
    rm -rf /tmp/curl-* >> $log 2>&1

    ldconfig /usr/local/bin
    ldconfig /usr/local/lib
}
