#!/bin/bash

# Installs `pyenv` if not yet installed
function pyenv_install() {
    if [[ ! -d /opt/pyenv ]]; then
        echo_progress_start "Setting up pyenv version manager"
        git clone https://github.com/pyenv/pyenv.git /opt/pyenv >> $log 2>&1
        git clone https://github.com/pyenv/pyenv-virtualenv.git /opt/pyenv/plugins/pyenv-virtualenv >> $log 2>&1
        git clone https://github.com/pyenv/pyenv-update.git /opt/pyenv/plugins/pyenv-update >> $log 2>&1
        echo 'export PYENV_ROOT="/opt/pyenv"' >> /root/.bashrc
        echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> /root/.bashrc
        export PYENV_ROOT="/opt/pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        echo_progress_done
        apt_install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
    else
        if [[ -z $PYENV_ROOT ]]; then
            export PYENV_ROOT="/opt/pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
        fi
        pyenv_update
    fi
}

# Updates system's `pyenv`
function pyenv_update() {
    /opt/pyenv/bin/pyenv update >> "$log" 2>&1
}

# Install a specific version of python through `pyenv` if not yet available
# \
# Parameters:
# - `$1` = The version necessary
function pyenv_install_version() {
    version=$1
    versions=$(/opt/pyenv/bin/pyenv versions 2> "$log")
    if [[ ! $versions =~ $version ]]; then
        echo_progress_start "Compiling Python $version. This may take some time"
        /opt/pyenv/bin/pyenv install "$version" >> "$log" 2>&1
        echo_progress_done "Python $version compiled"
    else
        echo_log_only "Python $version already installed!"
    fi
}

# Install venv of a specific version
# \
# Parameters:
# - `$1` = The version necessary
# - `$2` = Full path of the destination to create it in
function pyenv_create_venv() {
    version=$1
    destination=$2
    echo_progress_start "Creating venv ($version) in $destination"
    mkdir -p $destination
    /opt/pyenv/versions/"$version"/bin/python3 -m venv "$destination" >> "$log" 2>&1
    echo_progress_done "venv created"
}

# Install pip appropriately if not yet installed
function python_getpip() {
    if ! command -v pip > /dev/null 2>&1; then
        echo_progress_start "Installing pip"
        if command -v python2.7 > /dev/null 2>&1; then
            python2bin=python2.7
        else
            python2bin=python2
        fi
        cd /tmp
        curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py >> $log 2>&1
        ${python2bin} get-pip.py >> $log 2>&1
        pip install virtualenv >> "${log}" 2>&1
        echo_progress_done "Pip installed"
    fi
}

# Creates a `venv` with `python2`, using the right system binary
# \
# Parameters:
# - `$1` = The user to install the `venv` for
# - `$2` = The name of the app to install it for
#    - This will create `/opt/.venv/$2` and `chown $1:` the directory
function python2_venv() {
    user=$1
    app=$2
    if command -v python2.7 > /dev/null 2>&1; then
        python2bin=python2.7
    else
        python2bin=python2
    fi
    echo_progress_start "Setting up the ${app} venv"
    mkdir -p /opt/.venv
    chown ${user}: /opt/.venv
    ${python2bin} -m virtualenv /opt/.venv/${app} >> "${log}" 2>&1
    chown -R ${user}: /opt/.venv/${app}
    echo_progress_done "Venv set up"
}

# Creates a `venv` with `python2`, using the right system binary inside of the user's home directory
#\
# Parameters:
# - `$1` = The user to install the `venv` for
# - `$2` = The name of the app to install it for
#    - This will create `/opt/.venv/$2` and `chown $1:` the directory
function python2_home_venv() {
    user=$1
    app=$2
    if command -v python2.7 > /dev/null 2>&1; then
        python2bin=python2.7
    else
        python2bin=python2
    fi
    echo_progress_start "Setting up the ${app} venv"
    mkdir -p /home/${user}/.venv
    chown ${user}: /home/${user}/.venv
    ${python2bin} -m virtualenv /home/${user}/.venv/${app} >> "${log}" 2>&1
    chown -R ${user}: /home/${user}/.venv/${app}
    echo_progress_done "Venv set up"
}
# Creates a `venv` with `python3`, using the right system binary
# \
# Parameters:
# - `$1` = The user to install the `venv` for
# - `$2` = The name of the app to install it for
#    - This will create `/opt/.venv/$2` and `chown $1:` the directory
function python3_venv() {
    user=$1
    app=$2
    echo_progress_start "Setting up the ${app} venv"
    mkdir -p /opt/.venv
    chown ${user}: /opt/.venv
    python3 -m venv /opt/.venv/${app} >> "${log}" 2>&1
    chown -R ${user}: /opt/.venv/${app}
    echo_progress_done "Venv set up"
}
